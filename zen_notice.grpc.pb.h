// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: zen_notice.proto
// Original file comments:
// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_zen_5fnotice_2eproto__INCLUDED
#define GRPC_zen_5fnotice_2eproto__INCLUDED

#include "zen_notice.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace zen_notice {

//  
class ZenNoticeHandle final {
 public:
  static constexpr char const* service_full_name() {
    return "zen_notice.ZenNoticeHandle";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status NoticeLine(::grpc::ClientContext* context, const ::zen_notice::NoticeLineReq& request, ::zen_notice::NoticeLineRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zen_notice::NoticeLineRsp>> AsyncNoticeLine(::grpc::ClientContext* context, const ::zen_notice::NoticeLineReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zen_notice::NoticeLineRsp>>(AsyncNoticeLineRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zen_notice::NoticeLineRsp>> PrepareAsyncNoticeLine(::grpc::ClientContext* context, const ::zen_notice::NoticeLineReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zen_notice::NoticeLineRsp>>(PrepareAsyncNoticeLineRaw(context, request, cq));
    }
    virtual ::grpc::Status NoticeDraw(::grpc::ClientContext* context, const ::zen_notice::NoticeDrawReq& request, ::zen_notice::NoticeDrawRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zen_notice::NoticeDrawRsp>> AsyncNoticeDraw(::grpc::ClientContext* context, const ::zen_notice::NoticeDrawReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zen_notice::NoticeDrawRsp>>(AsyncNoticeDrawRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zen_notice::NoticeDrawRsp>> PrepareAsyncNoticeDraw(::grpc::ClientContext* context, const ::zen_notice::NoticeDrawReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zen_notice::NoticeDrawRsp>>(PrepareAsyncNoticeDrawRaw(context, request, cq));
    }
    virtual ::grpc::Status NoticeTrade(::grpc::ClientContext* context, const ::zen_notice::NoticeTradeReq& request, ::zen_notice::NoticeTradeRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zen_notice::NoticeTradeRsp>> AsyncNoticeTrade(::grpc::ClientContext* context, const ::zen_notice::NoticeTradeReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zen_notice::NoticeTradeRsp>>(AsyncNoticeTradeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zen_notice::NoticeTradeRsp>> PrepareAsyncNoticeTrade(::grpc::ClientContext* context, const ::zen_notice::NoticeTradeReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zen_notice::NoticeTradeRsp>>(PrepareAsyncNoticeTradeRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void NoticeLine(::grpc::ClientContext* context, const ::zen_notice::NoticeLineReq* request, ::zen_notice::NoticeLineRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NoticeLine(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zen_notice::NoticeLineRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NoticeLine(::grpc::ClientContext* context, const ::zen_notice::NoticeLineReq* request, ::zen_notice::NoticeLineRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void NoticeLine(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zen_notice::NoticeLineRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void NoticeDraw(::grpc::ClientContext* context, const ::zen_notice::NoticeDrawReq* request, ::zen_notice::NoticeDrawRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NoticeDraw(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zen_notice::NoticeDrawRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NoticeDraw(::grpc::ClientContext* context, const ::zen_notice::NoticeDrawReq* request, ::zen_notice::NoticeDrawRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void NoticeDraw(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zen_notice::NoticeDrawRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void NoticeTrade(::grpc::ClientContext* context, const ::zen_notice::NoticeTradeReq* request, ::zen_notice::NoticeTradeRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NoticeTrade(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zen_notice::NoticeTradeRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NoticeTrade(::grpc::ClientContext* context, const ::zen_notice::NoticeTradeReq* request, ::zen_notice::NoticeTradeRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void NoticeTrade(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zen_notice::NoticeTradeRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zen_notice::NoticeLineRsp>* AsyncNoticeLineRaw(::grpc::ClientContext* context, const ::zen_notice::NoticeLineReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zen_notice::NoticeLineRsp>* PrepareAsyncNoticeLineRaw(::grpc::ClientContext* context, const ::zen_notice::NoticeLineReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zen_notice::NoticeDrawRsp>* AsyncNoticeDrawRaw(::grpc::ClientContext* context, const ::zen_notice::NoticeDrawReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zen_notice::NoticeDrawRsp>* PrepareAsyncNoticeDrawRaw(::grpc::ClientContext* context, const ::zen_notice::NoticeDrawReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zen_notice::NoticeTradeRsp>* AsyncNoticeTradeRaw(::grpc::ClientContext* context, const ::zen_notice::NoticeTradeReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zen_notice::NoticeTradeRsp>* PrepareAsyncNoticeTradeRaw(::grpc::ClientContext* context, const ::zen_notice::NoticeTradeReq& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status NoticeLine(::grpc::ClientContext* context, const ::zen_notice::NoticeLineReq& request, ::zen_notice::NoticeLineRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zen_notice::NoticeLineRsp>> AsyncNoticeLine(::grpc::ClientContext* context, const ::zen_notice::NoticeLineReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zen_notice::NoticeLineRsp>>(AsyncNoticeLineRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zen_notice::NoticeLineRsp>> PrepareAsyncNoticeLine(::grpc::ClientContext* context, const ::zen_notice::NoticeLineReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zen_notice::NoticeLineRsp>>(PrepareAsyncNoticeLineRaw(context, request, cq));
    }
    ::grpc::Status NoticeDraw(::grpc::ClientContext* context, const ::zen_notice::NoticeDrawReq& request, ::zen_notice::NoticeDrawRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zen_notice::NoticeDrawRsp>> AsyncNoticeDraw(::grpc::ClientContext* context, const ::zen_notice::NoticeDrawReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zen_notice::NoticeDrawRsp>>(AsyncNoticeDrawRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zen_notice::NoticeDrawRsp>> PrepareAsyncNoticeDraw(::grpc::ClientContext* context, const ::zen_notice::NoticeDrawReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zen_notice::NoticeDrawRsp>>(PrepareAsyncNoticeDrawRaw(context, request, cq));
    }
    ::grpc::Status NoticeTrade(::grpc::ClientContext* context, const ::zen_notice::NoticeTradeReq& request, ::zen_notice::NoticeTradeRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zen_notice::NoticeTradeRsp>> AsyncNoticeTrade(::grpc::ClientContext* context, const ::zen_notice::NoticeTradeReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zen_notice::NoticeTradeRsp>>(AsyncNoticeTradeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zen_notice::NoticeTradeRsp>> PrepareAsyncNoticeTrade(::grpc::ClientContext* context, const ::zen_notice::NoticeTradeReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zen_notice::NoticeTradeRsp>>(PrepareAsyncNoticeTradeRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void NoticeLine(::grpc::ClientContext* context, const ::zen_notice::NoticeLineReq* request, ::zen_notice::NoticeLineRsp* response, std::function<void(::grpc::Status)>) override;
      void NoticeLine(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zen_notice::NoticeLineRsp* response, std::function<void(::grpc::Status)>) override;
      void NoticeLine(::grpc::ClientContext* context, const ::zen_notice::NoticeLineReq* request, ::zen_notice::NoticeLineRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void NoticeLine(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zen_notice::NoticeLineRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void NoticeDraw(::grpc::ClientContext* context, const ::zen_notice::NoticeDrawReq* request, ::zen_notice::NoticeDrawRsp* response, std::function<void(::grpc::Status)>) override;
      void NoticeDraw(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zen_notice::NoticeDrawRsp* response, std::function<void(::grpc::Status)>) override;
      void NoticeDraw(::grpc::ClientContext* context, const ::zen_notice::NoticeDrawReq* request, ::zen_notice::NoticeDrawRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void NoticeDraw(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zen_notice::NoticeDrawRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void NoticeTrade(::grpc::ClientContext* context, const ::zen_notice::NoticeTradeReq* request, ::zen_notice::NoticeTradeRsp* response, std::function<void(::grpc::Status)>) override;
      void NoticeTrade(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zen_notice::NoticeTradeRsp* response, std::function<void(::grpc::Status)>) override;
      void NoticeTrade(::grpc::ClientContext* context, const ::zen_notice::NoticeTradeReq* request, ::zen_notice::NoticeTradeRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void NoticeTrade(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zen_notice::NoticeTradeRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::zen_notice::NoticeLineRsp>* AsyncNoticeLineRaw(::grpc::ClientContext* context, const ::zen_notice::NoticeLineReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zen_notice::NoticeLineRsp>* PrepareAsyncNoticeLineRaw(::grpc::ClientContext* context, const ::zen_notice::NoticeLineReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zen_notice::NoticeDrawRsp>* AsyncNoticeDrawRaw(::grpc::ClientContext* context, const ::zen_notice::NoticeDrawReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zen_notice::NoticeDrawRsp>* PrepareAsyncNoticeDrawRaw(::grpc::ClientContext* context, const ::zen_notice::NoticeDrawReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zen_notice::NoticeTradeRsp>* AsyncNoticeTradeRaw(::grpc::ClientContext* context, const ::zen_notice::NoticeTradeReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zen_notice::NoticeTradeRsp>* PrepareAsyncNoticeTradeRaw(::grpc::ClientContext* context, const ::zen_notice::NoticeTradeReq& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_NoticeLine_;
    const ::grpc::internal::RpcMethod rpcmethod_NoticeDraw_;
    const ::grpc::internal::RpcMethod rpcmethod_NoticeTrade_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status NoticeLine(::grpc::ServerContext* context, const ::zen_notice::NoticeLineReq* request, ::zen_notice::NoticeLineRsp* response);
    virtual ::grpc::Status NoticeDraw(::grpc::ServerContext* context, const ::zen_notice::NoticeDrawReq* request, ::zen_notice::NoticeDrawRsp* response);
    virtual ::grpc::Status NoticeTrade(::grpc::ServerContext* context, const ::zen_notice::NoticeTradeReq* request, ::zen_notice::NoticeTradeRsp* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_NoticeLine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NoticeLine() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_NoticeLine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NoticeLine(::grpc::ServerContext* /*context*/, const ::zen_notice::NoticeLineReq* /*request*/, ::zen_notice::NoticeLineRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNoticeLine(::grpc::ServerContext* context, ::zen_notice::NoticeLineReq* request, ::grpc::ServerAsyncResponseWriter< ::zen_notice::NoticeLineRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NoticeDraw : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NoticeDraw() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_NoticeDraw() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NoticeDraw(::grpc::ServerContext* /*context*/, const ::zen_notice::NoticeDrawReq* /*request*/, ::zen_notice::NoticeDrawRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNoticeDraw(::grpc::ServerContext* context, ::zen_notice::NoticeDrawReq* request, ::grpc::ServerAsyncResponseWriter< ::zen_notice::NoticeDrawRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NoticeTrade : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NoticeTrade() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_NoticeTrade() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NoticeTrade(::grpc::ServerContext* /*context*/, const ::zen_notice::NoticeTradeReq* /*request*/, ::zen_notice::NoticeTradeRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNoticeTrade(::grpc::ServerContext* context, ::zen_notice::NoticeTradeReq* request, ::grpc::ServerAsyncResponseWriter< ::zen_notice::NoticeTradeRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_NoticeLine<WithAsyncMethod_NoticeDraw<WithAsyncMethod_NoticeTrade<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_NoticeLine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_NoticeLine() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::zen_notice::NoticeLineReq, ::zen_notice::NoticeLineRsp>(
          [this](::grpc::ServerContext* context,
                 const ::zen_notice::NoticeLineReq* request,
                 ::zen_notice::NoticeLineRsp* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->NoticeLine(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_NoticeLine(
        ::grpc::experimental::MessageAllocator< ::zen_notice::NoticeLineReq, ::zen_notice::NoticeLineRsp>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::zen_notice::NoticeLineReq, ::zen_notice::NoticeLineRsp>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_NoticeLine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NoticeLine(::grpc::ServerContext* /*context*/, const ::zen_notice::NoticeLineReq* /*request*/, ::zen_notice::NoticeLineRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void NoticeLine(::grpc::ServerContext* /*context*/, const ::zen_notice::NoticeLineReq* /*request*/, ::zen_notice::NoticeLineRsp* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_NoticeDraw : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_NoticeDraw() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::zen_notice::NoticeDrawReq, ::zen_notice::NoticeDrawRsp>(
          [this](::grpc::ServerContext* context,
                 const ::zen_notice::NoticeDrawReq* request,
                 ::zen_notice::NoticeDrawRsp* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->NoticeDraw(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_NoticeDraw(
        ::grpc::experimental::MessageAllocator< ::zen_notice::NoticeDrawReq, ::zen_notice::NoticeDrawRsp>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::zen_notice::NoticeDrawReq, ::zen_notice::NoticeDrawRsp>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_NoticeDraw() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NoticeDraw(::grpc::ServerContext* /*context*/, const ::zen_notice::NoticeDrawReq* /*request*/, ::zen_notice::NoticeDrawRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void NoticeDraw(::grpc::ServerContext* /*context*/, const ::zen_notice::NoticeDrawReq* /*request*/, ::zen_notice::NoticeDrawRsp* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_NoticeTrade : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_NoticeTrade() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::zen_notice::NoticeTradeReq, ::zen_notice::NoticeTradeRsp>(
          [this](::grpc::ServerContext* context,
                 const ::zen_notice::NoticeTradeReq* request,
                 ::zen_notice::NoticeTradeRsp* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->NoticeTrade(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_NoticeTrade(
        ::grpc::experimental::MessageAllocator< ::zen_notice::NoticeTradeReq, ::zen_notice::NoticeTradeRsp>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::zen_notice::NoticeTradeReq, ::zen_notice::NoticeTradeRsp>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_NoticeTrade() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NoticeTrade(::grpc::ServerContext* /*context*/, const ::zen_notice::NoticeTradeReq* /*request*/, ::zen_notice::NoticeTradeRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void NoticeTrade(::grpc::ServerContext* /*context*/, const ::zen_notice::NoticeTradeReq* /*request*/, ::zen_notice::NoticeTradeRsp* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_NoticeLine<ExperimentalWithCallbackMethod_NoticeDraw<ExperimentalWithCallbackMethod_NoticeTrade<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_NoticeLine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NoticeLine() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_NoticeLine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NoticeLine(::grpc::ServerContext* /*context*/, const ::zen_notice::NoticeLineReq* /*request*/, ::zen_notice::NoticeLineRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NoticeDraw : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NoticeDraw() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_NoticeDraw() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NoticeDraw(::grpc::ServerContext* /*context*/, const ::zen_notice::NoticeDrawReq* /*request*/, ::zen_notice::NoticeDrawRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NoticeTrade : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NoticeTrade() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_NoticeTrade() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NoticeTrade(::grpc::ServerContext* /*context*/, const ::zen_notice::NoticeTradeReq* /*request*/, ::zen_notice::NoticeTradeRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_NoticeLine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NoticeLine() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_NoticeLine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NoticeLine(::grpc::ServerContext* /*context*/, const ::zen_notice::NoticeLineReq* /*request*/, ::zen_notice::NoticeLineRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNoticeLine(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NoticeDraw : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NoticeDraw() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_NoticeDraw() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NoticeDraw(::grpc::ServerContext* /*context*/, const ::zen_notice::NoticeDrawReq* /*request*/, ::zen_notice::NoticeDrawRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNoticeDraw(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NoticeTrade : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NoticeTrade() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_NoticeTrade() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NoticeTrade(::grpc::ServerContext* /*context*/, const ::zen_notice::NoticeTradeReq* /*request*/, ::zen_notice::NoticeTradeRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNoticeTrade(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_NoticeLine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_NoticeLine() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->NoticeLine(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_NoticeLine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NoticeLine(::grpc::ServerContext* /*context*/, const ::zen_notice::NoticeLineReq* /*request*/, ::zen_notice::NoticeLineRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void NoticeLine(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_NoticeDraw : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_NoticeDraw() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->NoticeDraw(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_NoticeDraw() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NoticeDraw(::grpc::ServerContext* /*context*/, const ::zen_notice::NoticeDrawReq* /*request*/, ::zen_notice::NoticeDrawRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void NoticeDraw(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_NoticeTrade : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_NoticeTrade() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->NoticeTrade(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_NoticeTrade() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NoticeTrade(::grpc::ServerContext* /*context*/, const ::zen_notice::NoticeTradeReq* /*request*/, ::zen_notice::NoticeTradeRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void NoticeTrade(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NoticeLine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NoticeLine() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::zen_notice::NoticeLineReq, ::zen_notice::NoticeLineRsp>(std::bind(&WithStreamedUnaryMethod_NoticeLine<BaseClass>::StreamedNoticeLine, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_NoticeLine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NoticeLine(::grpc::ServerContext* /*context*/, const ::zen_notice::NoticeLineReq* /*request*/, ::zen_notice::NoticeLineRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNoticeLine(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zen_notice::NoticeLineReq,::zen_notice::NoticeLineRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NoticeDraw : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NoticeDraw() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::zen_notice::NoticeDrawReq, ::zen_notice::NoticeDrawRsp>(std::bind(&WithStreamedUnaryMethod_NoticeDraw<BaseClass>::StreamedNoticeDraw, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_NoticeDraw() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NoticeDraw(::grpc::ServerContext* /*context*/, const ::zen_notice::NoticeDrawReq* /*request*/, ::zen_notice::NoticeDrawRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNoticeDraw(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zen_notice::NoticeDrawReq,::zen_notice::NoticeDrawRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NoticeTrade : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NoticeTrade() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::zen_notice::NoticeTradeReq, ::zen_notice::NoticeTradeRsp>(std::bind(&WithStreamedUnaryMethod_NoticeTrade<BaseClass>::StreamedNoticeTrade, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_NoticeTrade() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NoticeTrade(::grpc::ServerContext* /*context*/, const ::zen_notice::NoticeTradeReq* /*request*/, ::zen_notice::NoticeTradeRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNoticeTrade(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zen_notice::NoticeTradeReq,::zen_notice::NoticeTradeRsp>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_NoticeLine<WithStreamedUnaryMethod_NoticeDraw<WithStreamedUnaryMethod_NoticeTrade<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_NoticeLine<WithStreamedUnaryMethod_NoticeDraw<WithStreamedUnaryMethod_NoticeTrade<Service > > > StreamedService;
};

}  // namespace zen_notice


#endif  // GRPC_zen_5fnotice_2eproto__INCLUDED
