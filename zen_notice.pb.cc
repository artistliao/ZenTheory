// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zen_notice.proto

#include "zen_notice.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace zen_notice {
class NoticeLineReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NoticeLineReq> _instance;
} _NoticeLineReq_default_instance_;
class NoticeLineRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NoticeLineRsp> _instance;
} _NoticeLineRsp_default_instance_;
class NoticeDrawReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NoticeDrawReq> _instance;
} _NoticeDrawReq_default_instance_;
class NoticeDrawRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NoticeDrawRsp> _instance;
} _NoticeDrawRsp_default_instance_;
class NoticeTradeReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NoticeTradeReq> _instance;
} _NoticeTradeReq_default_instance_;
class NoticeTradeRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NoticeTradeRsp> _instance;
} _NoticeTradeRsp_default_instance_;
}  // namespace zen_notice
static void InitDefaultsscc_info_NoticeDrawReq_zen_5fnotice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zen_notice::_NoticeDrawReq_default_instance_;
    new (ptr) ::zen_notice::NoticeDrawReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zen_notice::NoticeDrawReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NoticeDrawReq_zen_5fnotice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NoticeDrawReq_zen_5fnotice_2eproto}, {}};

static void InitDefaultsscc_info_NoticeDrawRsp_zen_5fnotice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zen_notice::_NoticeDrawRsp_default_instance_;
    new (ptr) ::zen_notice::NoticeDrawRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zen_notice::NoticeDrawRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NoticeDrawRsp_zen_5fnotice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NoticeDrawRsp_zen_5fnotice_2eproto}, {}};

static void InitDefaultsscc_info_NoticeLineReq_zen_5fnotice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zen_notice::_NoticeLineReq_default_instance_;
    new (ptr) ::zen_notice::NoticeLineReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zen_notice::NoticeLineReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NoticeLineReq_zen_5fnotice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NoticeLineReq_zen_5fnotice_2eproto}, {}};

static void InitDefaultsscc_info_NoticeLineRsp_zen_5fnotice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zen_notice::_NoticeLineRsp_default_instance_;
    new (ptr) ::zen_notice::NoticeLineRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zen_notice::NoticeLineRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NoticeLineRsp_zen_5fnotice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NoticeLineRsp_zen_5fnotice_2eproto}, {}};

static void InitDefaultsscc_info_NoticeTradeReq_zen_5fnotice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zen_notice::_NoticeTradeReq_default_instance_;
    new (ptr) ::zen_notice::NoticeTradeReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zen_notice::NoticeTradeReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NoticeTradeReq_zen_5fnotice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NoticeTradeReq_zen_5fnotice_2eproto}, {}};

static void InitDefaultsscc_info_NoticeTradeRsp_zen_5fnotice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zen_notice::_NoticeTradeRsp_default_instance_;
    new (ptr) ::zen_notice::NoticeTradeRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zen_notice::NoticeTradeRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NoticeTradeRsp_zen_5fnotice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NoticeTradeRsp_zen_5fnotice_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_zen_5fnotice_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_zen_5fnotice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_zen_5fnotice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_zen_5fnotice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zen_notice::NoticeLineReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zen_notice::NoticeLineReq, code_),
  PROTOBUF_FIELD_OFFSET(::zen_notice::NoticeLineReq, name_),
  PROTOBUF_FIELD_OFFSET(::zen_notice::NoticeLineReq, period_),
  PROTOBUF_FIELD_OFFSET(::zen_notice::NoticeLineReq, trigger_ts_),
  PROTOBUF_FIELD_OFFSET(::zen_notice::NoticeLineReq, direction_),
  PROTOBUF_FIELD_OFFSET(::zen_notice::NoticeLineReq, line_start_ts_),
  PROTOBUF_FIELD_OFFSET(::zen_notice::NoticeLineReq, line_end_ts_),
  PROTOBUF_FIELD_OFFSET(::zen_notice::NoticeLineReq, high_),
  PROTOBUF_FIELD_OFFSET(::zen_notice::NoticeLineReq, low_),
  PROTOBUF_FIELD_OFFSET(::zen_notice::NoticeLineReq, sec_type_),
  PROTOBUF_FIELD_OFFSET(::zen_notice::NoticeLineReq, kline_start_ts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zen_notice::NoticeLineRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zen_notice::NoticeLineRsp, status_),
  PROTOBUF_FIELD_OFFSET(::zen_notice::NoticeLineRsp, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zen_notice::NoticeDrawReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zen_notice::NoticeDrawReq, code_),
  PROTOBUF_FIELD_OFFSET(::zen_notice::NoticeDrawReq, name_),
  PROTOBUF_FIELD_OFFSET(::zen_notice::NoticeDrawReq, period_),
  PROTOBUF_FIELD_OFFSET(::zen_notice::NoticeDrawReq, kline_start_ts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zen_notice::NoticeDrawRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zen_notice::NoticeDrawRsp, status_),
  PROTOBUF_FIELD_OFFSET(::zen_notice::NoticeDrawRsp, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zen_notice::NoticeTradeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zen_notice::NoticeTradeReq, code_),
  PROTOBUF_FIELD_OFFSET(::zen_notice::NoticeTradeReq, sec_type_),
  PROTOBUF_FIELD_OFFSET(::zen_notice::NoticeTradeReq, name_),
  PROTOBUF_FIELD_OFFSET(::zen_notice::NoticeTradeReq, period_),
  PROTOBUF_FIELD_OFFSET(::zen_notice::NoticeTradeReq, trade_type_),
  PROTOBUF_FIELD_OFFSET(::zen_notice::NoticeTradeReq, open_cover_type_),
  PROTOBUF_FIELD_OFFSET(::zen_notice::NoticeTradeReq, direction_),
  PROTOBUF_FIELD_OFFSET(::zen_notice::NoticeTradeReq, trigger_ts_),
  PROTOBUF_FIELD_OFFSET(::zen_notice::NoticeTradeReq, kline_start_ts_),
  PROTOBUF_FIELD_OFFSET(::zen_notice::NoticeTradeReq, price_),
  PROTOBUF_FIELD_OFFSET(::zen_notice::NoticeTradeReq, stop_loss_price_),
  PROTOBUF_FIELD_OFFSET(::zen_notice::NoticeTradeReq, ext_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zen_notice::NoticeTradeRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zen_notice::NoticeTradeRsp, status_),
  PROTOBUF_FIELD_OFFSET(::zen_notice::NoticeTradeRsp, message_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::zen_notice::NoticeLineReq)},
  { 16, -1, sizeof(::zen_notice::NoticeLineRsp)},
  { 23, -1, sizeof(::zen_notice::NoticeDrawReq)},
  { 32, -1, sizeof(::zen_notice::NoticeDrawRsp)},
  { 39, -1, sizeof(::zen_notice::NoticeTradeReq)},
  { 56, -1, sizeof(::zen_notice::NoticeTradeRsp)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zen_notice::_NoticeLineReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zen_notice::_NoticeLineRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zen_notice::_NoticeDrawReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zen_notice::_NoticeDrawRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zen_notice::_NoticeTradeReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zen_notice::_NoticeTradeRsp_default_instance_),
};

const char descriptor_table_protodef_zen_5fnotice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020zen_notice.proto\022\nzen_notice\"\323\001\n\rNotic"
  "eLineReq\022\014\n\004code\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\016\n\006"
  "period\030\003 \001(\t\022\022\n\ntrigger_ts\030\004 \001(\005\022\021\n\tdire"
  "ction\030\005 \001(\005\022\025\n\rline_start_ts\030\006 \001(\005\022\023\n\013li"
  "ne_end_ts\030\007 \001(\005\022\014\n\004high\030\010 \001(\001\022\013\n\003low\030\t \001"
  "(\001\022\020\n\010sec_type\030\n \001(\t\022\026\n\016kline_start_ts\030\013"
  " \001(\005\"0\n\rNoticeLineRsp\022\016\n\006status\030\001 \001(\005\022\017\n"
  "\007message\030\002 \001(\t\"S\n\rNoticeDrawReq\022\014\n\004code\030"
  "\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\016\n\006period\030\003 \001(\t\022\026\n\016k"
  "line_start_ts\030\004 \001(\005\"0\n\rNoticeDrawRsp\022\016\n\006"
  "status\030\001 \001(\005\022\017\n\007message\030\002 \001(\t\"\364\001\n\016Notice"
  "TradeReq\022\014\n\004code\030\001 \001(\t\022\020\n\010sec_type\030\002 \001(\t"
  "\022\014\n\004name\030\003 \001(\t\022\016\n\006period\030\004 \001(\t\022\022\n\ntrade_"
  "type\030\005 \001(\005\022\027\n\017open_cover_type\030\006 \001(\005\022\021\n\td"
  "irection\030\007 \001(\005\022\022\n\ntrigger_ts\030\010 \001(\005\022\026\n\016kl"
  "ine_start_ts\030\t \001(\005\022\r\n\005price\030\n \001(\001\022\027\n\017sto"
  "p_loss_price\030\013 \001(\001\022\020\n\010ext_info\030\014 \001(\t\"1\n\016"
  "NoticeTradeRsp\022\016\n\006status\030\001 \001(\005\022\017\n\007messag"
  "e\030\002 \001(\t2\346\001\n\017ZenNoticeHandle\022D\n\nNoticeLin"
  "e\022\031.zen_notice.NoticeLineReq\032\031.zen_notic"
  "e.NoticeLineRsp\"\000\022D\n\nNoticeDraw\022\031.zen_no"
  "tice.NoticeDrawReq\032\031.zen_notice.NoticeDr"
  "awRsp\"\000\022G\n\013NoticeTrade\022\032.zen_notice.Noti"
  "ceTradeReq\032\032.zen_notice.NoticeTradeRsp\"\000"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_zen_5fnotice_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_zen_5fnotice_2eproto_sccs[6] = {
  &scc_info_NoticeDrawReq_zen_5fnotice_2eproto.base,
  &scc_info_NoticeDrawRsp_zen_5fnotice_2eproto.base,
  &scc_info_NoticeLineReq_zen_5fnotice_2eproto.base,
  &scc_info_NoticeLineRsp_zen_5fnotice_2eproto.base,
  &scc_info_NoticeTradeReq_zen_5fnotice_2eproto.base,
  &scc_info_NoticeTradeRsp_zen_5fnotice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_zen_5fnotice_2eproto_once;
static bool descriptor_table_zen_5fnotice_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zen_5fnotice_2eproto = {
  &descriptor_table_zen_5fnotice_2eproto_initialized, descriptor_table_protodef_zen_5fnotice_2eproto, "zen_notice.proto", 968,
  &descriptor_table_zen_5fnotice_2eproto_once, descriptor_table_zen_5fnotice_2eproto_sccs, descriptor_table_zen_5fnotice_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_zen_5fnotice_2eproto::offsets,
  file_level_metadata_zen_5fnotice_2eproto, 6, file_level_enum_descriptors_zen_5fnotice_2eproto, file_level_service_descriptors_zen_5fnotice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_zen_5fnotice_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_zen_5fnotice_2eproto), true);
namespace zen_notice {

// ===================================================================

void NoticeLineReq::InitAsDefaultInstance() {
}
class NoticeLineReq::_Internal {
 public:
};

NoticeLineReq::NoticeLineReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zen_notice.NoticeLineReq)
}
NoticeLineReq::NoticeLineReq(const NoticeLineReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  period_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_period().empty()) {
    period_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.period_);
  }
  sec_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sec_type().empty()) {
    sec_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sec_type_);
  }
  ::memcpy(&trigger_ts_, &from.trigger_ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&kline_start_ts_) -
    reinterpret_cast<char*>(&trigger_ts_)) + sizeof(kline_start_ts_));
  // @@protoc_insertion_point(copy_constructor:zen_notice.NoticeLineReq)
}

void NoticeLineReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NoticeLineReq_zen_5fnotice_2eproto.base);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  period_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sec_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&trigger_ts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kline_start_ts_) -
      reinterpret_cast<char*>(&trigger_ts_)) + sizeof(kline_start_ts_));
}

NoticeLineReq::~NoticeLineReq() {
  // @@protoc_insertion_point(destructor:zen_notice.NoticeLineReq)
  SharedDtor();
}

void NoticeLineReq::SharedDtor() {
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  period_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sec_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NoticeLineReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NoticeLineReq& NoticeLineReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NoticeLineReq_zen_5fnotice_2eproto.base);
  return *internal_default_instance();
}


void NoticeLineReq::Clear() {
// @@protoc_insertion_point(message_clear_start:zen_notice.NoticeLineReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  period_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sec_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&trigger_ts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kline_start_ts_) -
      reinterpret_cast<char*>(&trigger_ts_)) + sizeof(kline_start_ts_));
  _internal_metadata_.Clear();
}

const char* NoticeLineReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_code(), ptr, ctx, "zen_notice.NoticeLineReq.code");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "zen_notice.NoticeLineReq.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string period = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_period(), ptr, ctx, "zen_notice.NoticeLineReq.period");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 trigger_ts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          trigger_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 direction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 line_start_ts = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          line_start_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 line_end_ts = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          line_end_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double high = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          high_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double low = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          low_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string sec_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_sec_type(), ptr, ctx, "zen_notice.NoticeLineReq.sec_type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 kline_start_ts = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          kline_start_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NoticeLineReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zen_notice.NoticeLineReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zen_notice.NoticeLineReq.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zen_notice.NoticeLineReq.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string period = 3;
  if (this->period().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_period().data(), static_cast<int>(this->_internal_period().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zen_notice.NoticeLineReq.period");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_period(), target);
  }

  // int32 trigger_ts = 4;
  if (this->trigger_ts() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_trigger_ts(), target);
  }

  // int32 direction = 5;
  if (this->direction() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_direction(), target);
  }

  // int32 line_start_ts = 6;
  if (this->line_start_ts() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_line_start_ts(), target);
  }

  // int32 line_end_ts = 7;
  if (this->line_end_ts() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_line_end_ts(), target);
  }

  // double high = 8;
  if (!(this->high() <= 0 && this->high() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_high(), target);
  }

  // double low = 9;
  if (!(this->low() <= 0 && this->low() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_low(), target);
  }

  // string sec_type = 10;
  if (this->sec_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sec_type().data(), static_cast<int>(this->_internal_sec_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zen_notice.NoticeLineReq.sec_type");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_sec_type(), target);
  }

  // int32 kline_start_ts = 11;
  if (this->kline_start_ts() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_kline_start_ts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zen_notice.NoticeLineReq)
  return target;
}

size_t NoticeLineReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zen_notice.NoticeLineReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string period = 3;
  if (this->period().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_period());
  }

  // string sec_type = 10;
  if (this->sec_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sec_type());
  }

  // int32 trigger_ts = 4;
  if (this->trigger_ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_trigger_ts());
  }

  // int32 direction = 5;
  if (this->direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_direction());
  }

  // int32 line_start_ts = 6;
  if (this->line_start_ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_line_start_ts());
  }

  // int32 line_end_ts = 7;
  if (this->line_end_ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_line_end_ts());
  }

  // double high = 8;
  if (!(this->high() <= 0 && this->high() >= 0)) {
    total_size += 1 + 8;
  }

  // double low = 9;
  if (!(this->low() <= 0 && this->low() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 kline_start_ts = 11;
  if (this->kline_start_ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_kline_start_ts());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NoticeLineReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zen_notice.NoticeLineReq)
  GOOGLE_DCHECK_NE(&from, this);
  const NoticeLineReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NoticeLineReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zen_notice.NoticeLineReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zen_notice.NoticeLineReq)
    MergeFrom(*source);
  }
}

void NoticeLineReq::MergeFrom(const NoticeLineReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zen_notice.NoticeLineReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.period().size() > 0) {

    period_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.period_);
  }
  if (from.sec_type().size() > 0) {

    sec_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sec_type_);
  }
  if (from.trigger_ts() != 0) {
    _internal_set_trigger_ts(from._internal_trigger_ts());
  }
  if (from.direction() != 0) {
    _internal_set_direction(from._internal_direction());
  }
  if (from.line_start_ts() != 0) {
    _internal_set_line_start_ts(from._internal_line_start_ts());
  }
  if (from.line_end_ts() != 0) {
    _internal_set_line_end_ts(from._internal_line_end_ts());
  }
  if (!(from.high() <= 0 && from.high() >= 0)) {
    _internal_set_high(from._internal_high());
  }
  if (!(from.low() <= 0 && from.low() >= 0)) {
    _internal_set_low(from._internal_low());
  }
  if (from.kline_start_ts() != 0) {
    _internal_set_kline_start_ts(from._internal_kline_start_ts());
  }
}

void NoticeLineReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zen_notice.NoticeLineReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoticeLineReq::CopyFrom(const NoticeLineReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zen_notice.NoticeLineReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoticeLineReq::IsInitialized() const {
  return true;
}

void NoticeLineReq::InternalSwap(NoticeLineReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  period_.Swap(&other->period_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sec_type_.Swap(&other->sec_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(trigger_ts_, other->trigger_ts_);
  swap(direction_, other->direction_);
  swap(line_start_ts_, other->line_start_ts_);
  swap(line_end_ts_, other->line_end_ts_);
  swap(high_, other->high_);
  swap(low_, other->low_);
  swap(kline_start_ts_, other->kline_start_ts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NoticeLineReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NoticeLineRsp::InitAsDefaultInstance() {
}
class NoticeLineRsp::_Internal {
 public:
};

NoticeLineRsp::NoticeLineRsp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zen_notice.NoticeLineRsp)
}
NoticeLineRsp::NoticeLineRsp(const NoticeLineRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:zen_notice.NoticeLineRsp)
}

void NoticeLineRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NoticeLineRsp_zen_5fnotice_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

NoticeLineRsp::~NoticeLineRsp() {
  // @@protoc_insertion_point(destructor:zen_notice.NoticeLineRsp)
  SharedDtor();
}

void NoticeLineRsp::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NoticeLineRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NoticeLineRsp& NoticeLineRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NoticeLineRsp_zen_5fnotice_2eproto.base);
  return *internal_default_instance();
}


void NoticeLineRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:zen_notice.NoticeLineRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  _internal_metadata_.Clear();
}

const char* NoticeLineRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_message(), ptr, ctx, "zen_notice.NoticeLineRsp.message");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NoticeLineRsp::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zen_notice.NoticeLineRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zen_notice.NoticeLineRsp.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zen_notice.NoticeLineRsp)
  return target;
}

size_t NoticeLineRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zen_notice.NoticeLineRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NoticeLineRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zen_notice.NoticeLineRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const NoticeLineRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NoticeLineRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zen_notice.NoticeLineRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zen_notice.NoticeLineRsp)
    MergeFrom(*source);
  }
}

void NoticeLineRsp::MergeFrom(const NoticeLineRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zen_notice.NoticeLineRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void NoticeLineRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zen_notice.NoticeLineRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoticeLineRsp::CopyFrom(const NoticeLineRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zen_notice.NoticeLineRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoticeLineRsp::IsInitialized() const {
  return true;
}

void NoticeLineRsp::InternalSwap(NoticeLineRsp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NoticeLineRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NoticeDrawReq::InitAsDefaultInstance() {
}
class NoticeDrawReq::_Internal {
 public:
};

NoticeDrawReq::NoticeDrawReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zen_notice.NoticeDrawReq)
}
NoticeDrawReq::NoticeDrawReq(const NoticeDrawReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  period_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_period().empty()) {
    period_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.period_);
  }
  kline_start_ts_ = from.kline_start_ts_;
  // @@protoc_insertion_point(copy_constructor:zen_notice.NoticeDrawReq)
}

void NoticeDrawReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NoticeDrawReq_zen_5fnotice_2eproto.base);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  period_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kline_start_ts_ = 0;
}

NoticeDrawReq::~NoticeDrawReq() {
  // @@protoc_insertion_point(destructor:zen_notice.NoticeDrawReq)
  SharedDtor();
}

void NoticeDrawReq::SharedDtor() {
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  period_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NoticeDrawReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NoticeDrawReq& NoticeDrawReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NoticeDrawReq_zen_5fnotice_2eproto.base);
  return *internal_default_instance();
}


void NoticeDrawReq::Clear() {
// @@protoc_insertion_point(message_clear_start:zen_notice.NoticeDrawReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  period_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kline_start_ts_ = 0;
  _internal_metadata_.Clear();
}

const char* NoticeDrawReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_code(), ptr, ctx, "zen_notice.NoticeDrawReq.code");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "zen_notice.NoticeDrawReq.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string period = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_period(), ptr, ctx, "zen_notice.NoticeDrawReq.period");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 kline_start_ts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          kline_start_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NoticeDrawReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zen_notice.NoticeDrawReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zen_notice.NoticeDrawReq.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zen_notice.NoticeDrawReq.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string period = 3;
  if (this->period().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_period().data(), static_cast<int>(this->_internal_period().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zen_notice.NoticeDrawReq.period");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_period(), target);
  }

  // int32 kline_start_ts = 4;
  if (this->kline_start_ts() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_kline_start_ts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zen_notice.NoticeDrawReq)
  return target;
}

size_t NoticeDrawReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zen_notice.NoticeDrawReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string period = 3;
  if (this->period().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_period());
  }

  // int32 kline_start_ts = 4;
  if (this->kline_start_ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_kline_start_ts());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NoticeDrawReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zen_notice.NoticeDrawReq)
  GOOGLE_DCHECK_NE(&from, this);
  const NoticeDrawReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NoticeDrawReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zen_notice.NoticeDrawReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zen_notice.NoticeDrawReq)
    MergeFrom(*source);
  }
}

void NoticeDrawReq::MergeFrom(const NoticeDrawReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zen_notice.NoticeDrawReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.period().size() > 0) {

    period_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.period_);
  }
  if (from.kline_start_ts() != 0) {
    _internal_set_kline_start_ts(from._internal_kline_start_ts());
  }
}

void NoticeDrawReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zen_notice.NoticeDrawReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoticeDrawReq::CopyFrom(const NoticeDrawReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zen_notice.NoticeDrawReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoticeDrawReq::IsInitialized() const {
  return true;
}

void NoticeDrawReq::InternalSwap(NoticeDrawReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  period_.Swap(&other->period_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(kline_start_ts_, other->kline_start_ts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NoticeDrawReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NoticeDrawRsp::InitAsDefaultInstance() {
}
class NoticeDrawRsp::_Internal {
 public:
};

NoticeDrawRsp::NoticeDrawRsp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zen_notice.NoticeDrawRsp)
}
NoticeDrawRsp::NoticeDrawRsp(const NoticeDrawRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:zen_notice.NoticeDrawRsp)
}

void NoticeDrawRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NoticeDrawRsp_zen_5fnotice_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

NoticeDrawRsp::~NoticeDrawRsp() {
  // @@protoc_insertion_point(destructor:zen_notice.NoticeDrawRsp)
  SharedDtor();
}

void NoticeDrawRsp::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NoticeDrawRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NoticeDrawRsp& NoticeDrawRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NoticeDrawRsp_zen_5fnotice_2eproto.base);
  return *internal_default_instance();
}


void NoticeDrawRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:zen_notice.NoticeDrawRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  _internal_metadata_.Clear();
}

const char* NoticeDrawRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_message(), ptr, ctx, "zen_notice.NoticeDrawRsp.message");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NoticeDrawRsp::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zen_notice.NoticeDrawRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zen_notice.NoticeDrawRsp.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zen_notice.NoticeDrawRsp)
  return target;
}

size_t NoticeDrawRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zen_notice.NoticeDrawRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NoticeDrawRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zen_notice.NoticeDrawRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const NoticeDrawRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NoticeDrawRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zen_notice.NoticeDrawRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zen_notice.NoticeDrawRsp)
    MergeFrom(*source);
  }
}

void NoticeDrawRsp::MergeFrom(const NoticeDrawRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zen_notice.NoticeDrawRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void NoticeDrawRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zen_notice.NoticeDrawRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoticeDrawRsp::CopyFrom(const NoticeDrawRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zen_notice.NoticeDrawRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoticeDrawRsp::IsInitialized() const {
  return true;
}

void NoticeDrawRsp::InternalSwap(NoticeDrawRsp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NoticeDrawRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NoticeTradeReq::InitAsDefaultInstance() {
}
class NoticeTradeReq::_Internal {
 public:
};

NoticeTradeReq::NoticeTradeReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zen_notice.NoticeTradeReq)
}
NoticeTradeReq::NoticeTradeReq(const NoticeTradeReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  sec_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sec_type().empty()) {
    sec_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sec_type_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  period_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_period().empty()) {
    period_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.period_);
  }
  ext_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ext_info().empty()) {
    ext_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ext_info_);
  }
  ::memcpy(&trade_type_, &from.trade_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&kline_start_ts_) -
    reinterpret_cast<char*>(&trade_type_)) + sizeof(kline_start_ts_));
  // @@protoc_insertion_point(copy_constructor:zen_notice.NoticeTradeReq)
}

void NoticeTradeReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NoticeTradeReq_zen_5fnotice_2eproto.base);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sec_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  period_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&trade_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kline_start_ts_) -
      reinterpret_cast<char*>(&trade_type_)) + sizeof(kline_start_ts_));
}

NoticeTradeReq::~NoticeTradeReq() {
  // @@protoc_insertion_point(destructor:zen_notice.NoticeTradeReq)
  SharedDtor();
}

void NoticeTradeReq::SharedDtor() {
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sec_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  period_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NoticeTradeReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NoticeTradeReq& NoticeTradeReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NoticeTradeReq_zen_5fnotice_2eproto.base);
  return *internal_default_instance();
}


void NoticeTradeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:zen_notice.NoticeTradeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sec_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  period_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&trade_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kline_start_ts_) -
      reinterpret_cast<char*>(&trade_type_)) + sizeof(kline_start_ts_));
  _internal_metadata_.Clear();
}

const char* NoticeTradeReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_code(), ptr, ctx, "zen_notice.NoticeTradeReq.code");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sec_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_sec_type(), ptr, ctx, "zen_notice.NoticeTradeReq.sec_type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "zen_notice.NoticeTradeReq.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string period = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_period(), ptr, ctx, "zen_notice.NoticeTradeReq.period");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 trade_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          trade_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 open_cover_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          open_cover_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 direction = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 trigger_ts = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          trigger_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 kline_start_ts = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          kline_start_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double price = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double stop_loss_price = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          stop_loss_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string ext_info = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_ext_info(), ptr, ctx, "zen_notice.NoticeTradeReq.ext_info");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NoticeTradeReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zen_notice.NoticeTradeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zen_notice.NoticeTradeReq.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  // string sec_type = 2;
  if (this->sec_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sec_type().data(), static_cast<int>(this->_internal_sec_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zen_notice.NoticeTradeReq.sec_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sec_type(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zen_notice.NoticeTradeReq.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string period = 4;
  if (this->period().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_period().data(), static_cast<int>(this->_internal_period().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zen_notice.NoticeTradeReq.period");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_period(), target);
  }

  // int32 trade_type = 5;
  if (this->trade_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_trade_type(), target);
  }

  // int32 open_cover_type = 6;
  if (this->open_cover_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_open_cover_type(), target);
  }

  // int32 direction = 7;
  if (this->direction() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_direction(), target);
  }

  // int32 trigger_ts = 8;
  if (this->trigger_ts() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_trigger_ts(), target);
  }

  // int32 kline_start_ts = 9;
  if (this->kline_start_ts() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_kline_start_ts(), target);
  }

  // double price = 10;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_price(), target);
  }

  // double stop_loss_price = 11;
  if (!(this->stop_loss_price() <= 0 && this->stop_loss_price() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_stop_loss_price(), target);
  }

  // string ext_info = 12;
  if (this->ext_info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ext_info().data(), static_cast<int>(this->_internal_ext_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zen_notice.NoticeTradeReq.ext_info");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_ext_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zen_notice.NoticeTradeReq)
  return target;
}

size_t NoticeTradeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zen_notice.NoticeTradeReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string sec_type = 2;
  if (this->sec_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sec_type());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string period = 4;
  if (this->period().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_period());
  }

  // string ext_info = 12;
  if (this->ext_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ext_info());
  }

  // int32 trade_type = 5;
  if (this->trade_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_trade_type());
  }

  // int32 open_cover_type = 6;
  if (this->open_cover_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_open_cover_type());
  }

  // int32 direction = 7;
  if (this->direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_direction());
  }

  // int32 trigger_ts = 8;
  if (this->trigger_ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_trigger_ts());
  }

  // double price = 10;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    total_size += 1 + 8;
  }

  // double stop_loss_price = 11;
  if (!(this->stop_loss_price() <= 0 && this->stop_loss_price() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 kline_start_ts = 9;
  if (this->kline_start_ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_kline_start_ts());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NoticeTradeReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zen_notice.NoticeTradeReq)
  GOOGLE_DCHECK_NE(&from, this);
  const NoticeTradeReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NoticeTradeReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zen_notice.NoticeTradeReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zen_notice.NoticeTradeReq)
    MergeFrom(*source);
  }
}

void NoticeTradeReq::MergeFrom(const NoticeTradeReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zen_notice.NoticeTradeReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from.sec_type().size() > 0) {

    sec_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sec_type_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.period().size() > 0) {

    period_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.period_);
  }
  if (from.ext_info().size() > 0) {

    ext_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ext_info_);
  }
  if (from.trade_type() != 0) {
    _internal_set_trade_type(from._internal_trade_type());
  }
  if (from.open_cover_type() != 0) {
    _internal_set_open_cover_type(from._internal_open_cover_type());
  }
  if (from.direction() != 0) {
    _internal_set_direction(from._internal_direction());
  }
  if (from.trigger_ts() != 0) {
    _internal_set_trigger_ts(from._internal_trigger_ts());
  }
  if (!(from.price() <= 0 && from.price() >= 0)) {
    _internal_set_price(from._internal_price());
  }
  if (!(from.stop_loss_price() <= 0 && from.stop_loss_price() >= 0)) {
    _internal_set_stop_loss_price(from._internal_stop_loss_price());
  }
  if (from.kline_start_ts() != 0) {
    _internal_set_kline_start_ts(from._internal_kline_start_ts());
  }
}

void NoticeTradeReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zen_notice.NoticeTradeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoticeTradeReq::CopyFrom(const NoticeTradeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zen_notice.NoticeTradeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoticeTradeReq::IsInitialized() const {
  return true;
}

void NoticeTradeReq::InternalSwap(NoticeTradeReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sec_type_.Swap(&other->sec_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  period_.Swap(&other->period_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ext_info_.Swap(&other->ext_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(trade_type_, other->trade_type_);
  swap(open_cover_type_, other->open_cover_type_);
  swap(direction_, other->direction_);
  swap(trigger_ts_, other->trigger_ts_);
  swap(price_, other->price_);
  swap(stop_loss_price_, other->stop_loss_price_);
  swap(kline_start_ts_, other->kline_start_ts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NoticeTradeReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NoticeTradeRsp::InitAsDefaultInstance() {
}
class NoticeTradeRsp::_Internal {
 public:
};

NoticeTradeRsp::NoticeTradeRsp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zen_notice.NoticeTradeRsp)
}
NoticeTradeRsp::NoticeTradeRsp(const NoticeTradeRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:zen_notice.NoticeTradeRsp)
}

void NoticeTradeRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NoticeTradeRsp_zen_5fnotice_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

NoticeTradeRsp::~NoticeTradeRsp() {
  // @@protoc_insertion_point(destructor:zen_notice.NoticeTradeRsp)
  SharedDtor();
}

void NoticeTradeRsp::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NoticeTradeRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NoticeTradeRsp& NoticeTradeRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NoticeTradeRsp_zen_5fnotice_2eproto.base);
  return *internal_default_instance();
}


void NoticeTradeRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:zen_notice.NoticeTradeRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  _internal_metadata_.Clear();
}

const char* NoticeTradeRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_message(), ptr, ctx, "zen_notice.NoticeTradeRsp.message");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NoticeTradeRsp::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zen_notice.NoticeTradeRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zen_notice.NoticeTradeRsp.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zen_notice.NoticeTradeRsp)
  return target;
}

size_t NoticeTradeRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zen_notice.NoticeTradeRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NoticeTradeRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zen_notice.NoticeTradeRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const NoticeTradeRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NoticeTradeRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zen_notice.NoticeTradeRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zen_notice.NoticeTradeRsp)
    MergeFrom(*source);
  }
}

void NoticeTradeRsp::MergeFrom(const NoticeTradeRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zen_notice.NoticeTradeRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void NoticeTradeRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zen_notice.NoticeTradeRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoticeTradeRsp::CopyFrom(const NoticeTradeRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zen_notice.NoticeTradeRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoticeTradeRsp::IsInitialized() const {
  return true;
}

void NoticeTradeRsp::InternalSwap(NoticeTradeRsp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NoticeTradeRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace zen_notice
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zen_notice::NoticeLineReq* Arena::CreateMaybeMessage< ::zen_notice::NoticeLineReq >(Arena* arena) {
  return Arena::CreateInternal< ::zen_notice::NoticeLineReq >(arena);
}
template<> PROTOBUF_NOINLINE ::zen_notice::NoticeLineRsp* Arena::CreateMaybeMessage< ::zen_notice::NoticeLineRsp >(Arena* arena) {
  return Arena::CreateInternal< ::zen_notice::NoticeLineRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::zen_notice::NoticeDrawReq* Arena::CreateMaybeMessage< ::zen_notice::NoticeDrawReq >(Arena* arena) {
  return Arena::CreateInternal< ::zen_notice::NoticeDrawReq >(arena);
}
template<> PROTOBUF_NOINLINE ::zen_notice::NoticeDrawRsp* Arena::CreateMaybeMessage< ::zen_notice::NoticeDrawRsp >(Arena* arena) {
  return Arena::CreateInternal< ::zen_notice::NoticeDrawRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::zen_notice::NoticeTradeReq* Arena::CreateMaybeMessage< ::zen_notice::NoticeTradeReq >(Arena* arena) {
  return Arena::CreateInternal< ::zen_notice::NoticeTradeReq >(arena);
}
template<> PROTOBUF_NOINLINE ::zen_notice::NoticeTradeRsp* Arena::CreateMaybeMessage< ::zen_notice::NoticeTradeRsp >(Arena* arena) {
  return Arena::CreateInternal< ::zen_notice::NoticeTradeRsp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
