// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zen_data_svr.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_zen_5fdata_5fsvr_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_zen_5fdata_5fsvr_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_zen_5fdata_5fsvr_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_zen_5fdata_5fsvr_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zen_5fdata_5fsvr_2eproto;
namespace zen_data_svr {
class AskKlineReq;
class AskKlineReqDefaultTypeInternal;
extern AskKlineReqDefaultTypeInternal _AskKlineReq_default_instance_;
class AskKlineRsp;
class AskKlineRspDefaultTypeInternal;
extern AskKlineRspDefaultTypeInternal _AskKlineRsp_default_instance_;
class Kline;
class KlineDefaultTypeInternal;
extern KlineDefaultTypeInternal _Kline_default_instance_;
class PushKlineReq;
class PushKlineReqDefaultTypeInternal;
extern PushKlineReqDefaultTypeInternal _PushKlineReq_default_instance_;
class PushKlineRsp;
class PushKlineRspDefaultTypeInternal;
extern PushKlineRspDefaultTypeInternal _PushKlineRsp_default_instance_;
}  // namespace zen_data_svr
PROTOBUF_NAMESPACE_OPEN
template<> ::zen_data_svr::AskKlineReq* Arena::CreateMaybeMessage<::zen_data_svr::AskKlineReq>(Arena*);
template<> ::zen_data_svr::AskKlineRsp* Arena::CreateMaybeMessage<::zen_data_svr::AskKlineRsp>(Arena*);
template<> ::zen_data_svr::Kline* Arena::CreateMaybeMessage<::zen_data_svr::Kline>(Arena*);
template<> ::zen_data_svr::PushKlineReq* Arena::CreateMaybeMessage<::zen_data_svr::PushKlineReq>(Arena*);
template<> ::zen_data_svr::PushKlineRsp* Arena::CreateMaybeMessage<::zen_data_svr::PushKlineRsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zen_data_svr {

// ===================================================================

class PushKlineReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zen_data_svr.PushKlineReq) */ {
 public:
  PushKlineReq();
  virtual ~PushKlineReq();

  PushKlineReq(const PushKlineReq& from);
  PushKlineReq(PushKlineReq&& from) noexcept
    : PushKlineReq() {
    *this = ::std::move(from);
  }

  inline PushKlineReq& operator=(const PushKlineReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline PushKlineReq& operator=(PushKlineReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PushKlineReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PushKlineReq* internal_default_instance() {
    return reinterpret_cast<const PushKlineReq*>(
               &_PushKlineReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PushKlineReq& a, PushKlineReq& b) {
    a.Swap(&b);
  }
  inline void Swap(PushKlineReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PushKlineReq* New() const final {
    return CreateMaybeMessage<PushKlineReq>(nullptr);
  }

  PushKlineReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PushKlineReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PushKlineReq& from);
  void MergeFrom(const PushKlineReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PushKlineReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zen_data_svr.PushKlineReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zen_5fdata_5fsvr_2eproto);
    return ::descriptor_table_zen_5fdata_5fsvr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 2,
    kPeriodFieldNumber = 3,
    kSecTypeFieldNumber = 11,
    kOpenFieldNumber = 4,
    kHighFieldNumber = 5,
    kTsFieldNumber = 1,
    kIsEndFieldNumber = 10,
    kLowFieldNumber = 6,
    kCloseFieldNumber = 7,
    kVolFieldNumber = 8,
    kAmountFieldNumber = 9,
  };
  // string code = 2;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string period = 3;
  void clear_period();
  const std::string& period() const;
  void set_period(const std::string& value);
  void set_period(std::string&& value);
  void set_period(const char* value);
  void set_period(const char* value, size_t size);
  std::string* mutable_period();
  std::string* release_period();
  void set_allocated_period(std::string* period);
  private:
  const std::string& _internal_period() const;
  void _internal_set_period(const std::string& value);
  std::string* _internal_mutable_period();
  public:

  // string sec_type = 11;
  void clear_sec_type();
  const std::string& sec_type() const;
  void set_sec_type(const std::string& value);
  void set_sec_type(std::string&& value);
  void set_sec_type(const char* value);
  void set_sec_type(const char* value, size_t size);
  std::string* mutable_sec_type();
  std::string* release_sec_type();
  void set_allocated_sec_type(std::string* sec_type);
  private:
  const std::string& _internal_sec_type() const;
  void _internal_set_sec_type(const std::string& value);
  std::string* _internal_mutable_sec_type();
  public:

  // double open = 4;
  void clear_open();
  double open() const;
  void set_open(double value);
  private:
  double _internal_open() const;
  void _internal_set_open(double value);
  public:

  // double high = 5;
  void clear_high();
  double high() const;
  void set_high(double value);
  private:
  double _internal_high() const;
  void _internal_set_high(double value);
  public:

  // int32 ts = 1;
  void clear_ts();
  ::PROTOBUF_NAMESPACE_ID::int32 ts() const;
  void set_ts(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ts() const;
  void _internal_set_ts(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 is_end = 10;
  void clear_is_end();
  ::PROTOBUF_NAMESPACE_ID::int32 is_end() const;
  void set_is_end(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_is_end() const;
  void _internal_set_is_end(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double low = 6;
  void clear_low();
  double low() const;
  void set_low(double value);
  private:
  double _internal_low() const;
  void _internal_set_low(double value);
  public:

  // double close = 7;
  void clear_close();
  double close() const;
  void set_close(double value);
  private:
  double _internal_close() const;
  void _internal_set_close(double value);
  public:

  // int64 vol = 8;
  void clear_vol();
  ::PROTOBUF_NAMESPACE_ID::int64 vol() const;
  void set_vol(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_vol() const;
  void _internal_set_vol(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double amount = 9;
  void clear_amount();
  double amount() const;
  void set_amount(double value);
  private:
  double _internal_amount() const;
  void _internal_set_amount(double value);
  public:

  // @@protoc_insertion_point(class_scope:zen_data_svr.PushKlineReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr period_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sec_type_;
  double open_;
  double high_;
  ::PROTOBUF_NAMESPACE_ID::int32 ts_;
  ::PROTOBUF_NAMESPACE_ID::int32 is_end_;
  double low_;
  double close_;
  ::PROTOBUF_NAMESPACE_ID::int64 vol_;
  double amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zen_5fdata_5fsvr_2eproto;
};
// -------------------------------------------------------------------

class PushKlineRsp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zen_data_svr.PushKlineRsp) */ {
 public:
  PushKlineRsp();
  virtual ~PushKlineRsp();

  PushKlineRsp(const PushKlineRsp& from);
  PushKlineRsp(PushKlineRsp&& from) noexcept
    : PushKlineRsp() {
    *this = ::std::move(from);
  }

  inline PushKlineRsp& operator=(const PushKlineRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline PushKlineRsp& operator=(PushKlineRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PushKlineRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PushKlineRsp* internal_default_instance() {
    return reinterpret_cast<const PushKlineRsp*>(
               &_PushKlineRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PushKlineRsp& a, PushKlineRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(PushKlineRsp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PushKlineRsp* New() const final {
    return CreateMaybeMessage<PushKlineRsp>(nullptr);
  }

  PushKlineRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PushKlineRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PushKlineRsp& from);
  void MergeFrom(const PushKlineRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PushKlineRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zen_data_svr.PushKlineRsp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zen_5fdata_5fsvr_2eproto);
    return ::descriptor_table_zen_5fdata_5fsvr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:zen_data_svr.PushKlineRsp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zen_5fdata_5fsvr_2eproto;
};
// -------------------------------------------------------------------

class AskKlineReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zen_data_svr.AskKlineReq) */ {
 public:
  AskKlineReq();
  virtual ~AskKlineReq();

  AskKlineReq(const AskKlineReq& from);
  AskKlineReq(AskKlineReq&& from) noexcept
    : AskKlineReq() {
    *this = ::std::move(from);
  }

  inline AskKlineReq& operator=(const AskKlineReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AskKlineReq& operator=(AskKlineReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AskKlineReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AskKlineReq* internal_default_instance() {
    return reinterpret_cast<const AskKlineReq*>(
               &_AskKlineReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AskKlineReq& a, AskKlineReq& b) {
    a.Swap(&b);
  }
  inline void Swap(AskKlineReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AskKlineReq* New() const final {
    return CreateMaybeMessage<AskKlineReq>(nullptr);
  }

  AskKlineReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AskKlineReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AskKlineReq& from);
  void MergeFrom(const AskKlineReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AskKlineReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zen_data_svr.AskKlineReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zen_5fdata_5fsvr_2eproto);
    return ::descriptor_table_zen_5fdata_5fsvr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
    kPeriodFieldNumber = 2,
    kSecTypeFieldNumber = 3,
    kFromTsFieldNumber = 4,
    kToTsFieldNumber = 5,
  };
  // string code = 1;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string period = 2;
  void clear_period();
  const std::string& period() const;
  void set_period(const std::string& value);
  void set_period(std::string&& value);
  void set_period(const char* value);
  void set_period(const char* value, size_t size);
  std::string* mutable_period();
  std::string* release_period();
  void set_allocated_period(std::string* period);
  private:
  const std::string& _internal_period() const;
  void _internal_set_period(const std::string& value);
  std::string* _internal_mutable_period();
  public:

  // string sec_type = 3;
  void clear_sec_type();
  const std::string& sec_type() const;
  void set_sec_type(const std::string& value);
  void set_sec_type(std::string&& value);
  void set_sec_type(const char* value);
  void set_sec_type(const char* value, size_t size);
  std::string* mutable_sec_type();
  std::string* release_sec_type();
  void set_allocated_sec_type(std::string* sec_type);
  private:
  const std::string& _internal_sec_type() const;
  void _internal_set_sec_type(const std::string& value);
  std::string* _internal_mutable_sec_type();
  public:

  // int32 from_ts = 4;
  void clear_from_ts();
  ::PROTOBUF_NAMESPACE_ID::int32 from_ts() const;
  void set_from_ts(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_from_ts() const;
  void _internal_set_from_ts(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 to_ts = 5;
  void clear_to_ts();
  ::PROTOBUF_NAMESPACE_ID::int32 to_ts() const;
  void set_to_ts(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_to_ts() const;
  void _internal_set_to_ts(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:zen_data_svr.AskKlineReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr period_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sec_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 from_ts_;
  ::PROTOBUF_NAMESPACE_ID::int32 to_ts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zen_5fdata_5fsvr_2eproto;
};
// -------------------------------------------------------------------

class Kline :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zen_data_svr.Kline) */ {
 public:
  Kline();
  virtual ~Kline();

  Kline(const Kline& from);
  Kline(Kline&& from) noexcept
    : Kline() {
    *this = ::std::move(from);
  }

  inline Kline& operator=(const Kline& from) {
    CopyFrom(from);
    return *this;
  }
  inline Kline& operator=(Kline&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Kline& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Kline* internal_default_instance() {
    return reinterpret_cast<const Kline*>(
               &_Kline_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Kline& a, Kline& b) {
    a.Swap(&b);
  }
  inline void Swap(Kline* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Kline* New() const final {
    return CreateMaybeMessage<Kline>(nullptr);
  }

  Kline* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Kline>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Kline& from);
  void MergeFrom(const Kline& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Kline* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zen_data_svr.Kline";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zen_5fdata_5fsvr_2eproto);
    return ::descriptor_table_zen_5fdata_5fsvr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpenFieldNumber = 2,
    kHighFieldNumber = 3,
    kLowFieldNumber = 4,
    kTsFieldNumber = 1,
    kIsEndFieldNumber = 8,
    kCloseFieldNumber = 5,
    kVolFieldNumber = 6,
    kAmountFieldNumber = 7,
  };
  // double open = 2;
  void clear_open();
  double open() const;
  void set_open(double value);
  private:
  double _internal_open() const;
  void _internal_set_open(double value);
  public:

  // double high = 3;
  void clear_high();
  double high() const;
  void set_high(double value);
  private:
  double _internal_high() const;
  void _internal_set_high(double value);
  public:

  // double low = 4;
  void clear_low();
  double low() const;
  void set_low(double value);
  private:
  double _internal_low() const;
  void _internal_set_low(double value);
  public:

  // int32 ts = 1;
  void clear_ts();
  ::PROTOBUF_NAMESPACE_ID::int32 ts() const;
  void set_ts(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ts() const;
  void _internal_set_ts(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 is_end = 8;
  void clear_is_end();
  ::PROTOBUF_NAMESPACE_ID::int32 is_end() const;
  void set_is_end(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_is_end() const;
  void _internal_set_is_end(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double close = 5;
  void clear_close();
  double close() const;
  void set_close(double value);
  private:
  double _internal_close() const;
  void _internal_set_close(double value);
  public:

  // int64 vol = 6;
  void clear_vol();
  ::PROTOBUF_NAMESPACE_ID::int64 vol() const;
  void set_vol(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_vol() const;
  void _internal_set_vol(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double amount = 7;
  void clear_amount();
  double amount() const;
  void set_amount(double value);
  private:
  double _internal_amount() const;
  void _internal_set_amount(double value);
  public:

  // @@protoc_insertion_point(class_scope:zen_data_svr.Kline)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double open_;
  double high_;
  double low_;
  ::PROTOBUF_NAMESPACE_ID::int32 ts_;
  ::PROTOBUF_NAMESPACE_ID::int32 is_end_;
  double close_;
  ::PROTOBUF_NAMESPACE_ID::int64 vol_;
  double amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zen_5fdata_5fsvr_2eproto;
};
// -------------------------------------------------------------------

class AskKlineRsp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zen_data_svr.AskKlineRsp) */ {
 public:
  AskKlineRsp();
  virtual ~AskKlineRsp();

  AskKlineRsp(const AskKlineRsp& from);
  AskKlineRsp(AskKlineRsp&& from) noexcept
    : AskKlineRsp() {
    *this = ::std::move(from);
  }

  inline AskKlineRsp& operator=(const AskKlineRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AskKlineRsp& operator=(AskKlineRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AskKlineRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AskKlineRsp* internal_default_instance() {
    return reinterpret_cast<const AskKlineRsp*>(
               &_AskKlineRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AskKlineRsp& a, AskKlineRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(AskKlineRsp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AskKlineRsp* New() const final {
    return CreateMaybeMessage<AskKlineRsp>(nullptr);
  }

  AskKlineRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AskKlineRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AskKlineRsp& from);
  void MergeFrom(const AskKlineRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AskKlineRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zen_data_svr.AskKlineRsp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zen_5fdata_5fsvr_2eproto);
    return ::descriptor_table_zen_5fdata_5fsvr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKlinesFieldNumber = 6,
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 3,
    kPeriodFieldNumber = 4,
    kSecTypeFieldNumber = 5,
    kStatusFieldNumber = 1,
  };
  // repeated .zen_data_svr.Kline klines = 6;
  int klines_size() const;
  private:
  int _internal_klines_size() const;
  public:
  void clear_klines();
  ::zen_data_svr::Kline* mutable_klines(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zen_data_svr::Kline >*
      mutable_klines();
  private:
  const ::zen_data_svr::Kline& _internal_klines(int index) const;
  ::zen_data_svr::Kline* _internal_add_klines();
  public:
  const ::zen_data_svr::Kline& klines(int index) const;
  ::zen_data_svr::Kline* add_klines();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zen_data_svr::Kline >&
      klines() const;

  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string code = 3;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string period = 4;
  void clear_period();
  const std::string& period() const;
  void set_period(const std::string& value);
  void set_period(std::string&& value);
  void set_period(const char* value);
  void set_period(const char* value, size_t size);
  std::string* mutable_period();
  std::string* release_period();
  void set_allocated_period(std::string* period);
  private:
  const std::string& _internal_period() const;
  void _internal_set_period(const std::string& value);
  std::string* _internal_mutable_period();
  public:

  // string sec_type = 5;
  void clear_sec_type();
  const std::string& sec_type() const;
  void set_sec_type(const std::string& value);
  void set_sec_type(std::string&& value);
  void set_sec_type(const char* value);
  void set_sec_type(const char* value, size_t size);
  std::string* mutable_sec_type();
  std::string* release_sec_type();
  void set_allocated_sec_type(std::string* sec_type);
  private:
  const std::string& _internal_sec_type() const;
  void _internal_set_sec_type(const std::string& value);
  std::string* _internal_mutable_sec_type();
  public:

  // int32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:zen_data_svr.AskKlineRsp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zen_data_svr::Kline > klines_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr period_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sec_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zen_5fdata_5fsvr_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PushKlineReq

// int32 ts = 1;
inline void PushKlineReq::clear_ts() {
  ts_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PushKlineReq::_internal_ts() const {
  return ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PushKlineReq::ts() const {
  // @@protoc_insertion_point(field_get:zen_data_svr.PushKlineReq.ts)
  return _internal_ts();
}
inline void PushKlineReq::_internal_set_ts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ts_ = value;
}
inline void PushKlineReq::set_ts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ts(value);
  // @@protoc_insertion_point(field_set:zen_data_svr.PushKlineReq.ts)
}

// string code = 2;
inline void PushKlineReq::clear_code() {
  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PushKlineReq::code() const {
  // @@protoc_insertion_point(field_get:zen_data_svr.PushKlineReq.code)
  return _internal_code();
}
inline void PushKlineReq::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:zen_data_svr.PushKlineReq.code)
}
inline std::string* PushKlineReq::mutable_code() {
  // @@protoc_insertion_point(field_mutable:zen_data_svr.PushKlineReq.code)
  return _internal_mutable_code();
}
inline const std::string& PushKlineReq::_internal_code() const {
  return code_.GetNoArena();
}
inline void PushKlineReq::_internal_set_code(const std::string& value) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PushKlineReq::set_code(std::string&& value) {
  
  code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zen_data_svr.PushKlineReq.code)
}
inline void PushKlineReq::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zen_data_svr.PushKlineReq.code)
}
inline void PushKlineReq::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zen_data_svr.PushKlineReq.code)
}
inline std::string* PushKlineReq::_internal_mutable_code() {
  
  return code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PushKlineReq::release_code() {
  // @@protoc_insertion_point(field_release:zen_data_svr.PushKlineReq.code)
  
  return code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PushKlineReq::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:zen_data_svr.PushKlineReq.code)
}

// string sec_type = 11;
inline void PushKlineReq::clear_sec_type() {
  sec_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PushKlineReq::sec_type() const {
  // @@protoc_insertion_point(field_get:zen_data_svr.PushKlineReq.sec_type)
  return _internal_sec_type();
}
inline void PushKlineReq::set_sec_type(const std::string& value) {
  _internal_set_sec_type(value);
  // @@protoc_insertion_point(field_set:zen_data_svr.PushKlineReq.sec_type)
}
inline std::string* PushKlineReq::mutable_sec_type() {
  // @@protoc_insertion_point(field_mutable:zen_data_svr.PushKlineReq.sec_type)
  return _internal_mutable_sec_type();
}
inline const std::string& PushKlineReq::_internal_sec_type() const {
  return sec_type_.GetNoArena();
}
inline void PushKlineReq::_internal_set_sec_type(const std::string& value) {
  
  sec_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PushKlineReq::set_sec_type(std::string&& value) {
  
  sec_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zen_data_svr.PushKlineReq.sec_type)
}
inline void PushKlineReq::set_sec_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sec_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zen_data_svr.PushKlineReq.sec_type)
}
inline void PushKlineReq::set_sec_type(const char* value, size_t size) {
  
  sec_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zen_data_svr.PushKlineReq.sec_type)
}
inline std::string* PushKlineReq::_internal_mutable_sec_type() {
  
  return sec_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PushKlineReq::release_sec_type() {
  // @@protoc_insertion_point(field_release:zen_data_svr.PushKlineReq.sec_type)
  
  return sec_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PushKlineReq::set_allocated_sec_type(std::string* sec_type) {
  if (sec_type != nullptr) {
    
  } else {
    
  }
  sec_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sec_type);
  // @@protoc_insertion_point(field_set_allocated:zen_data_svr.PushKlineReq.sec_type)
}

// string period = 3;
inline void PushKlineReq::clear_period() {
  period_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PushKlineReq::period() const {
  // @@protoc_insertion_point(field_get:zen_data_svr.PushKlineReq.period)
  return _internal_period();
}
inline void PushKlineReq::set_period(const std::string& value) {
  _internal_set_period(value);
  // @@protoc_insertion_point(field_set:zen_data_svr.PushKlineReq.period)
}
inline std::string* PushKlineReq::mutable_period() {
  // @@protoc_insertion_point(field_mutable:zen_data_svr.PushKlineReq.period)
  return _internal_mutable_period();
}
inline const std::string& PushKlineReq::_internal_period() const {
  return period_.GetNoArena();
}
inline void PushKlineReq::_internal_set_period(const std::string& value) {
  
  period_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PushKlineReq::set_period(std::string&& value) {
  
  period_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zen_data_svr.PushKlineReq.period)
}
inline void PushKlineReq::set_period(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  period_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zen_data_svr.PushKlineReq.period)
}
inline void PushKlineReq::set_period(const char* value, size_t size) {
  
  period_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zen_data_svr.PushKlineReq.period)
}
inline std::string* PushKlineReq::_internal_mutable_period() {
  
  return period_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PushKlineReq::release_period() {
  // @@protoc_insertion_point(field_release:zen_data_svr.PushKlineReq.period)
  
  return period_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PushKlineReq::set_allocated_period(std::string* period) {
  if (period != nullptr) {
    
  } else {
    
  }
  period_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), period);
  // @@protoc_insertion_point(field_set_allocated:zen_data_svr.PushKlineReq.period)
}

// double open = 4;
inline void PushKlineReq::clear_open() {
  open_ = 0;
}
inline double PushKlineReq::_internal_open() const {
  return open_;
}
inline double PushKlineReq::open() const {
  // @@protoc_insertion_point(field_get:zen_data_svr.PushKlineReq.open)
  return _internal_open();
}
inline void PushKlineReq::_internal_set_open(double value) {
  
  open_ = value;
}
inline void PushKlineReq::set_open(double value) {
  _internal_set_open(value);
  // @@protoc_insertion_point(field_set:zen_data_svr.PushKlineReq.open)
}

// double high = 5;
inline void PushKlineReq::clear_high() {
  high_ = 0;
}
inline double PushKlineReq::_internal_high() const {
  return high_;
}
inline double PushKlineReq::high() const {
  // @@protoc_insertion_point(field_get:zen_data_svr.PushKlineReq.high)
  return _internal_high();
}
inline void PushKlineReq::_internal_set_high(double value) {
  
  high_ = value;
}
inline void PushKlineReq::set_high(double value) {
  _internal_set_high(value);
  // @@protoc_insertion_point(field_set:zen_data_svr.PushKlineReq.high)
}

// double low = 6;
inline void PushKlineReq::clear_low() {
  low_ = 0;
}
inline double PushKlineReq::_internal_low() const {
  return low_;
}
inline double PushKlineReq::low() const {
  // @@protoc_insertion_point(field_get:zen_data_svr.PushKlineReq.low)
  return _internal_low();
}
inline void PushKlineReq::_internal_set_low(double value) {
  
  low_ = value;
}
inline void PushKlineReq::set_low(double value) {
  _internal_set_low(value);
  // @@protoc_insertion_point(field_set:zen_data_svr.PushKlineReq.low)
}

// double close = 7;
inline void PushKlineReq::clear_close() {
  close_ = 0;
}
inline double PushKlineReq::_internal_close() const {
  return close_;
}
inline double PushKlineReq::close() const {
  // @@protoc_insertion_point(field_get:zen_data_svr.PushKlineReq.close)
  return _internal_close();
}
inline void PushKlineReq::_internal_set_close(double value) {
  
  close_ = value;
}
inline void PushKlineReq::set_close(double value) {
  _internal_set_close(value);
  // @@protoc_insertion_point(field_set:zen_data_svr.PushKlineReq.close)
}

// int64 vol = 8;
inline void PushKlineReq::clear_vol() {
  vol_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PushKlineReq::_internal_vol() const {
  return vol_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PushKlineReq::vol() const {
  // @@protoc_insertion_point(field_get:zen_data_svr.PushKlineReq.vol)
  return _internal_vol();
}
inline void PushKlineReq::_internal_set_vol(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  vol_ = value;
}
inline void PushKlineReq::set_vol(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_vol(value);
  // @@protoc_insertion_point(field_set:zen_data_svr.PushKlineReq.vol)
}

// double amount = 9;
inline void PushKlineReq::clear_amount() {
  amount_ = 0;
}
inline double PushKlineReq::_internal_amount() const {
  return amount_;
}
inline double PushKlineReq::amount() const {
  // @@protoc_insertion_point(field_get:zen_data_svr.PushKlineReq.amount)
  return _internal_amount();
}
inline void PushKlineReq::_internal_set_amount(double value) {
  
  amount_ = value;
}
inline void PushKlineReq::set_amount(double value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:zen_data_svr.PushKlineReq.amount)
}

// int32 is_end = 10;
inline void PushKlineReq::clear_is_end() {
  is_end_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PushKlineReq::_internal_is_end() const {
  return is_end_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PushKlineReq::is_end() const {
  // @@protoc_insertion_point(field_get:zen_data_svr.PushKlineReq.is_end)
  return _internal_is_end();
}
inline void PushKlineReq::_internal_set_is_end(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  is_end_ = value;
}
inline void PushKlineReq::set_is_end(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_is_end(value);
  // @@protoc_insertion_point(field_set:zen_data_svr.PushKlineReq.is_end)
}

// -------------------------------------------------------------------

// PushKlineRsp

// int32 status = 1;
inline void PushKlineRsp::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PushKlineRsp::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PushKlineRsp::status() const {
  // @@protoc_insertion_point(field_get:zen_data_svr.PushKlineRsp.status)
  return _internal_status();
}
inline void PushKlineRsp::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void PushKlineRsp::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:zen_data_svr.PushKlineRsp.status)
}

// string message = 2;
inline void PushKlineRsp::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PushKlineRsp::message() const {
  // @@protoc_insertion_point(field_get:zen_data_svr.PushKlineRsp.message)
  return _internal_message();
}
inline void PushKlineRsp::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:zen_data_svr.PushKlineRsp.message)
}
inline std::string* PushKlineRsp::mutable_message() {
  // @@protoc_insertion_point(field_mutable:zen_data_svr.PushKlineRsp.message)
  return _internal_mutable_message();
}
inline const std::string& PushKlineRsp::_internal_message() const {
  return message_.GetNoArena();
}
inline void PushKlineRsp::_internal_set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PushKlineRsp::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zen_data_svr.PushKlineRsp.message)
}
inline void PushKlineRsp::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zen_data_svr.PushKlineRsp.message)
}
inline void PushKlineRsp::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zen_data_svr.PushKlineRsp.message)
}
inline std::string* PushKlineRsp::_internal_mutable_message() {
  
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PushKlineRsp::release_message() {
  // @@protoc_insertion_point(field_release:zen_data_svr.PushKlineRsp.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PushKlineRsp::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:zen_data_svr.PushKlineRsp.message)
}

// -------------------------------------------------------------------

// AskKlineReq

// string code = 1;
inline void AskKlineReq::clear_code() {
  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AskKlineReq::code() const {
  // @@protoc_insertion_point(field_get:zen_data_svr.AskKlineReq.code)
  return _internal_code();
}
inline void AskKlineReq::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:zen_data_svr.AskKlineReq.code)
}
inline std::string* AskKlineReq::mutable_code() {
  // @@protoc_insertion_point(field_mutable:zen_data_svr.AskKlineReq.code)
  return _internal_mutable_code();
}
inline const std::string& AskKlineReq::_internal_code() const {
  return code_.GetNoArena();
}
inline void AskKlineReq::_internal_set_code(const std::string& value) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AskKlineReq::set_code(std::string&& value) {
  
  code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zen_data_svr.AskKlineReq.code)
}
inline void AskKlineReq::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zen_data_svr.AskKlineReq.code)
}
inline void AskKlineReq::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zen_data_svr.AskKlineReq.code)
}
inline std::string* AskKlineReq::_internal_mutable_code() {
  
  return code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AskKlineReq::release_code() {
  // @@protoc_insertion_point(field_release:zen_data_svr.AskKlineReq.code)
  
  return code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AskKlineReq::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:zen_data_svr.AskKlineReq.code)
}

// string period = 2;
inline void AskKlineReq::clear_period() {
  period_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AskKlineReq::period() const {
  // @@protoc_insertion_point(field_get:zen_data_svr.AskKlineReq.period)
  return _internal_period();
}
inline void AskKlineReq::set_period(const std::string& value) {
  _internal_set_period(value);
  // @@protoc_insertion_point(field_set:zen_data_svr.AskKlineReq.period)
}
inline std::string* AskKlineReq::mutable_period() {
  // @@protoc_insertion_point(field_mutable:zen_data_svr.AskKlineReq.period)
  return _internal_mutable_period();
}
inline const std::string& AskKlineReq::_internal_period() const {
  return period_.GetNoArena();
}
inline void AskKlineReq::_internal_set_period(const std::string& value) {
  
  period_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AskKlineReq::set_period(std::string&& value) {
  
  period_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zen_data_svr.AskKlineReq.period)
}
inline void AskKlineReq::set_period(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  period_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zen_data_svr.AskKlineReq.period)
}
inline void AskKlineReq::set_period(const char* value, size_t size) {
  
  period_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zen_data_svr.AskKlineReq.period)
}
inline std::string* AskKlineReq::_internal_mutable_period() {
  
  return period_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AskKlineReq::release_period() {
  // @@protoc_insertion_point(field_release:zen_data_svr.AskKlineReq.period)
  
  return period_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AskKlineReq::set_allocated_period(std::string* period) {
  if (period != nullptr) {
    
  } else {
    
  }
  period_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), period);
  // @@protoc_insertion_point(field_set_allocated:zen_data_svr.AskKlineReq.period)
}

// string sec_type = 3;
inline void AskKlineReq::clear_sec_type() {
  sec_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AskKlineReq::sec_type() const {
  // @@protoc_insertion_point(field_get:zen_data_svr.AskKlineReq.sec_type)
  return _internal_sec_type();
}
inline void AskKlineReq::set_sec_type(const std::string& value) {
  _internal_set_sec_type(value);
  // @@protoc_insertion_point(field_set:zen_data_svr.AskKlineReq.sec_type)
}
inline std::string* AskKlineReq::mutable_sec_type() {
  // @@protoc_insertion_point(field_mutable:zen_data_svr.AskKlineReq.sec_type)
  return _internal_mutable_sec_type();
}
inline const std::string& AskKlineReq::_internal_sec_type() const {
  return sec_type_.GetNoArena();
}
inline void AskKlineReq::_internal_set_sec_type(const std::string& value) {
  
  sec_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AskKlineReq::set_sec_type(std::string&& value) {
  
  sec_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zen_data_svr.AskKlineReq.sec_type)
}
inline void AskKlineReq::set_sec_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sec_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zen_data_svr.AskKlineReq.sec_type)
}
inline void AskKlineReq::set_sec_type(const char* value, size_t size) {
  
  sec_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zen_data_svr.AskKlineReq.sec_type)
}
inline std::string* AskKlineReq::_internal_mutable_sec_type() {
  
  return sec_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AskKlineReq::release_sec_type() {
  // @@protoc_insertion_point(field_release:zen_data_svr.AskKlineReq.sec_type)
  
  return sec_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AskKlineReq::set_allocated_sec_type(std::string* sec_type) {
  if (sec_type != nullptr) {
    
  } else {
    
  }
  sec_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sec_type);
  // @@protoc_insertion_point(field_set_allocated:zen_data_svr.AskKlineReq.sec_type)
}

// int32 from_ts = 4;
inline void AskKlineReq::clear_from_ts() {
  from_ts_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AskKlineReq::_internal_from_ts() const {
  return from_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AskKlineReq::from_ts() const {
  // @@protoc_insertion_point(field_get:zen_data_svr.AskKlineReq.from_ts)
  return _internal_from_ts();
}
inline void AskKlineReq::_internal_set_from_ts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  from_ts_ = value;
}
inline void AskKlineReq::set_from_ts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_from_ts(value);
  // @@protoc_insertion_point(field_set:zen_data_svr.AskKlineReq.from_ts)
}

// int32 to_ts = 5;
inline void AskKlineReq::clear_to_ts() {
  to_ts_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AskKlineReq::_internal_to_ts() const {
  return to_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AskKlineReq::to_ts() const {
  // @@protoc_insertion_point(field_get:zen_data_svr.AskKlineReq.to_ts)
  return _internal_to_ts();
}
inline void AskKlineReq::_internal_set_to_ts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  to_ts_ = value;
}
inline void AskKlineReq::set_to_ts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_to_ts(value);
  // @@protoc_insertion_point(field_set:zen_data_svr.AskKlineReq.to_ts)
}

// -------------------------------------------------------------------

// Kline

// int32 ts = 1;
inline void Kline::clear_ts() {
  ts_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Kline::_internal_ts() const {
  return ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Kline::ts() const {
  // @@protoc_insertion_point(field_get:zen_data_svr.Kline.ts)
  return _internal_ts();
}
inline void Kline::_internal_set_ts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ts_ = value;
}
inline void Kline::set_ts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ts(value);
  // @@protoc_insertion_point(field_set:zen_data_svr.Kline.ts)
}

// double open = 2;
inline void Kline::clear_open() {
  open_ = 0;
}
inline double Kline::_internal_open() const {
  return open_;
}
inline double Kline::open() const {
  // @@protoc_insertion_point(field_get:zen_data_svr.Kline.open)
  return _internal_open();
}
inline void Kline::_internal_set_open(double value) {
  
  open_ = value;
}
inline void Kline::set_open(double value) {
  _internal_set_open(value);
  // @@protoc_insertion_point(field_set:zen_data_svr.Kline.open)
}

// double high = 3;
inline void Kline::clear_high() {
  high_ = 0;
}
inline double Kline::_internal_high() const {
  return high_;
}
inline double Kline::high() const {
  // @@protoc_insertion_point(field_get:zen_data_svr.Kline.high)
  return _internal_high();
}
inline void Kline::_internal_set_high(double value) {
  
  high_ = value;
}
inline void Kline::set_high(double value) {
  _internal_set_high(value);
  // @@protoc_insertion_point(field_set:zen_data_svr.Kline.high)
}

// double low = 4;
inline void Kline::clear_low() {
  low_ = 0;
}
inline double Kline::_internal_low() const {
  return low_;
}
inline double Kline::low() const {
  // @@protoc_insertion_point(field_get:zen_data_svr.Kline.low)
  return _internal_low();
}
inline void Kline::_internal_set_low(double value) {
  
  low_ = value;
}
inline void Kline::set_low(double value) {
  _internal_set_low(value);
  // @@protoc_insertion_point(field_set:zen_data_svr.Kline.low)
}

// double close = 5;
inline void Kline::clear_close() {
  close_ = 0;
}
inline double Kline::_internal_close() const {
  return close_;
}
inline double Kline::close() const {
  // @@protoc_insertion_point(field_get:zen_data_svr.Kline.close)
  return _internal_close();
}
inline void Kline::_internal_set_close(double value) {
  
  close_ = value;
}
inline void Kline::set_close(double value) {
  _internal_set_close(value);
  // @@protoc_insertion_point(field_set:zen_data_svr.Kline.close)
}

// int64 vol = 6;
inline void Kline::clear_vol() {
  vol_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Kline::_internal_vol() const {
  return vol_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Kline::vol() const {
  // @@protoc_insertion_point(field_get:zen_data_svr.Kline.vol)
  return _internal_vol();
}
inline void Kline::_internal_set_vol(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  vol_ = value;
}
inline void Kline::set_vol(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_vol(value);
  // @@protoc_insertion_point(field_set:zen_data_svr.Kline.vol)
}

// double amount = 7;
inline void Kline::clear_amount() {
  amount_ = 0;
}
inline double Kline::_internal_amount() const {
  return amount_;
}
inline double Kline::amount() const {
  // @@protoc_insertion_point(field_get:zen_data_svr.Kline.amount)
  return _internal_amount();
}
inline void Kline::_internal_set_amount(double value) {
  
  amount_ = value;
}
inline void Kline::set_amount(double value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:zen_data_svr.Kline.amount)
}

// int32 is_end = 8;
inline void Kline::clear_is_end() {
  is_end_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Kline::_internal_is_end() const {
  return is_end_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Kline::is_end() const {
  // @@protoc_insertion_point(field_get:zen_data_svr.Kline.is_end)
  return _internal_is_end();
}
inline void Kline::_internal_set_is_end(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  is_end_ = value;
}
inline void Kline::set_is_end(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_is_end(value);
  // @@protoc_insertion_point(field_set:zen_data_svr.Kline.is_end)
}

// -------------------------------------------------------------------

// AskKlineRsp

// int32 status = 1;
inline void AskKlineRsp::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AskKlineRsp::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AskKlineRsp::status() const {
  // @@protoc_insertion_point(field_get:zen_data_svr.AskKlineRsp.status)
  return _internal_status();
}
inline void AskKlineRsp::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void AskKlineRsp::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:zen_data_svr.AskKlineRsp.status)
}

// string message = 2;
inline void AskKlineRsp::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AskKlineRsp::message() const {
  // @@protoc_insertion_point(field_get:zen_data_svr.AskKlineRsp.message)
  return _internal_message();
}
inline void AskKlineRsp::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:zen_data_svr.AskKlineRsp.message)
}
inline std::string* AskKlineRsp::mutable_message() {
  // @@protoc_insertion_point(field_mutable:zen_data_svr.AskKlineRsp.message)
  return _internal_mutable_message();
}
inline const std::string& AskKlineRsp::_internal_message() const {
  return message_.GetNoArena();
}
inline void AskKlineRsp::_internal_set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AskKlineRsp::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zen_data_svr.AskKlineRsp.message)
}
inline void AskKlineRsp::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zen_data_svr.AskKlineRsp.message)
}
inline void AskKlineRsp::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zen_data_svr.AskKlineRsp.message)
}
inline std::string* AskKlineRsp::_internal_mutable_message() {
  
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AskKlineRsp::release_message() {
  // @@protoc_insertion_point(field_release:zen_data_svr.AskKlineRsp.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AskKlineRsp::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:zen_data_svr.AskKlineRsp.message)
}

// string code = 3;
inline void AskKlineRsp::clear_code() {
  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AskKlineRsp::code() const {
  // @@protoc_insertion_point(field_get:zen_data_svr.AskKlineRsp.code)
  return _internal_code();
}
inline void AskKlineRsp::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:zen_data_svr.AskKlineRsp.code)
}
inline std::string* AskKlineRsp::mutable_code() {
  // @@protoc_insertion_point(field_mutable:zen_data_svr.AskKlineRsp.code)
  return _internal_mutable_code();
}
inline const std::string& AskKlineRsp::_internal_code() const {
  return code_.GetNoArena();
}
inline void AskKlineRsp::_internal_set_code(const std::string& value) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AskKlineRsp::set_code(std::string&& value) {
  
  code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zen_data_svr.AskKlineRsp.code)
}
inline void AskKlineRsp::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zen_data_svr.AskKlineRsp.code)
}
inline void AskKlineRsp::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zen_data_svr.AskKlineRsp.code)
}
inline std::string* AskKlineRsp::_internal_mutable_code() {
  
  return code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AskKlineRsp::release_code() {
  // @@protoc_insertion_point(field_release:zen_data_svr.AskKlineRsp.code)
  
  return code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AskKlineRsp::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:zen_data_svr.AskKlineRsp.code)
}

// string period = 4;
inline void AskKlineRsp::clear_period() {
  period_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AskKlineRsp::period() const {
  // @@protoc_insertion_point(field_get:zen_data_svr.AskKlineRsp.period)
  return _internal_period();
}
inline void AskKlineRsp::set_period(const std::string& value) {
  _internal_set_period(value);
  // @@protoc_insertion_point(field_set:zen_data_svr.AskKlineRsp.period)
}
inline std::string* AskKlineRsp::mutable_period() {
  // @@protoc_insertion_point(field_mutable:zen_data_svr.AskKlineRsp.period)
  return _internal_mutable_period();
}
inline const std::string& AskKlineRsp::_internal_period() const {
  return period_.GetNoArena();
}
inline void AskKlineRsp::_internal_set_period(const std::string& value) {
  
  period_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AskKlineRsp::set_period(std::string&& value) {
  
  period_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zen_data_svr.AskKlineRsp.period)
}
inline void AskKlineRsp::set_period(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  period_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zen_data_svr.AskKlineRsp.period)
}
inline void AskKlineRsp::set_period(const char* value, size_t size) {
  
  period_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zen_data_svr.AskKlineRsp.period)
}
inline std::string* AskKlineRsp::_internal_mutable_period() {
  
  return period_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AskKlineRsp::release_period() {
  // @@protoc_insertion_point(field_release:zen_data_svr.AskKlineRsp.period)
  
  return period_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AskKlineRsp::set_allocated_period(std::string* period) {
  if (period != nullptr) {
    
  } else {
    
  }
  period_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), period);
  // @@protoc_insertion_point(field_set_allocated:zen_data_svr.AskKlineRsp.period)
}

// string sec_type = 5;
inline void AskKlineRsp::clear_sec_type() {
  sec_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AskKlineRsp::sec_type() const {
  // @@protoc_insertion_point(field_get:zen_data_svr.AskKlineRsp.sec_type)
  return _internal_sec_type();
}
inline void AskKlineRsp::set_sec_type(const std::string& value) {
  _internal_set_sec_type(value);
  // @@protoc_insertion_point(field_set:zen_data_svr.AskKlineRsp.sec_type)
}
inline std::string* AskKlineRsp::mutable_sec_type() {
  // @@protoc_insertion_point(field_mutable:zen_data_svr.AskKlineRsp.sec_type)
  return _internal_mutable_sec_type();
}
inline const std::string& AskKlineRsp::_internal_sec_type() const {
  return sec_type_.GetNoArena();
}
inline void AskKlineRsp::_internal_set_sec_type(const std::string& value) {
  
  sec_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AskKlineRsp::set_sec_type(std::string&& value) {
  
  sec_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zen_data_svr.AskKlineRsp.sec_type)
}
inline void AskKlineRsp::set_sec_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sec_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zen_data_svr.AskKlineRsp.sec_type)
}
inline void AskKlineRsp::set_sec_type(const char* value, size_t size) {
  
  sec_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zen_data_svr.AskKlineRsp.sec_type)
}
inline std::string* AskKlineRsp::_internal_mutable_sec_type() {
  
  return sec_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AskKlineRsp::release_sec_type() {
  // @@protoc_insertion_point(field_release:zen_data_svr.AskKlineRsp.sec_type)
  
  return sec_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AskKlineRsp::set_allocated_sec_type(std::string* sec_type) {
  if (sec_type != nullptr) {
    
  } else {
    
  }
  sec_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sec_type);
  // @@protoc_insertion_point(field_set_allocated:zen_data_svr.AskKlineRsp.sec_type)
}

// repeated .zen_data_svr.Kline klines = 6;
inline int AskKlineRsp::_internal_klines_size() const {
  return klines_.size();
}
inline int AskKlineRsp::klines_size() const {
  return _internal_klines_size();
}
inline void AskKlineRsp::clear_klines() {
  klines_.Clear();
}
inline ::zen_data_svr::Kline* AskKlineRsp::mutable_klines(int index) {
  // @@protoc_insertion_point(field_mutable:zen_data_svr.AskKlineRsp.klines)
  return klines_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zen_data_svr::Kline >*
AskKlineRsp::mutable_klines() {
  // @@protoc_insertion_point(field_mutable_list:zen_data_svr.AskKlineRsp.klines)
  return &klines_;
}
inline const ::zen_data_svr::Kline& AskKlineRsp::_internal_klines(int index) const {
  return klines_.Get(index);
}
inline const ::zen_data_svr::Kline& AskKlineRsp::klines(int index) const {
  // @@protoc_insertion_point(field_get:zen_data_svr.AskKlineRsp.klines)
  return _internal_klines(index);
}
inline ::zen_data_svr::Kline* AskKlineRsp::_internal_add_klines() {
  return klines_.Add();
}
inline ::zen_data_svr::Kline* AskKlineRsp::add_klines() {
  // @@protoc_insertion_point(field_add:zen_data_svr.AskKlineRsp.klines)
  return _internal_add_klines();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zen_data_svr::Kline >&
AskKlineRsp::klines() const {
  // @@protoc_insertion_point(field_list:zen_data_svr.AskKlineRsp.klines)
  return klines_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace zen_data_svr

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_zen_5fdata_5fsvr_2eproto
