// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: zen_data_svr.proto

#include "zen_data_svr.pb.h"
#include "zen_data_svr.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace zen_data_svr {

static const char* ZendataHandle_method_names[] = {
  "/zen_data_svr.ZendataHandle/PushKlineData",
  "/zen_data_svr.ZendataHandle/AskKlineData",
};

std::unique_ptr< ZendataHandle::Stub> ZendataHandle::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ZendataHandle::Stub> stub(new ZendataHandle::Stub(channel));
  return stub;
}

ZendataHandle::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_PushKlineData_(ZendataHandle_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AskKlineData_(ZendataHandle_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ZendataHandle::Stub::PushKlineData(::grpc::ClientContext* context, const ::zen_data_svr::PushKlineReq& request, ::zen_data_svr::PushKlineRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PushKlineData_, context, request, response);
}

void ZendataHandle::Stub::experimental_async::PushKlineData(::grpc::ClientContext* context, const ::zen_data_svr::PushKlineReq* request, ::zen_data_svr::PushKlineRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PushKlineData_, context, request, response, std::move(f));
}

void ZendataHandle::Stub::experimental_async::PushKlineData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zen_data_svr::PushKlineRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PushKlineData_, context, request, response, std::move(f));
}

void ZendataHandle::Stub::experimental_async::PushKlineData(::grpc::ClientContext* context, const ::zen_data_svr::PushKlineReq* request, ::zen_data_svr::PushKlineRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PushKlineData_, context, request, response, reactor);
}

void ZendataHandle::Stub::experimental_async::PushKlineData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zen_data_svr::PushKlineRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PushKlineData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zen_data_svr::PushKlineRsp>* ZendataHandle::Stub::AsyncPushKlineDataRaw(::grpc::ClientContext* context, const ::zen_data_svr::PushKlineReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zen_data_svr::PushKlineRsp>::Create(channel_.get(), cq, rpcmethod_PushKlineData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::zen_data_svr::PushKlineRsp>* ZendataHandle::Stub::PrepareAsyncPushKlineDataRaw(::grpc::ClientContext* context, const ::zen_data_svr::PushKlineReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zen_data_svr::PushKlineRsp>::Create(channel_.get(), cq, rpcmethod_PushKlineData_, context, request, false);
}

::grpc::Status ZendataHandle::Stub::AskKlineData(::grpc::ClientContext* context, const ::zen_data_svr::AskKlineReq& request, ::zen_data_svr::AskKlineRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AskKlineData_, context, request, response);
}

void ZendataHandle::Stub::experimental_async::AskKlineData(::grpc::ClientContext* context, const ::zen_data_svr::AskKlineReq* request, ::zen_data_svr::AskKlineRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AskKlineData_, context, request, response, std::move(f));
}

void ZendataHandle::Stub::experimental_async::AskKlineData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zen_data_svr::AskKlineRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AskKlineData_, context, request, response, std::move(f));
}

void ZendataHandle::Stub::experimental_async::AskKlineData(::grpc::ClientContext* context, const ::zen_data_svr::AskKlineReq* request, ::zen_data_svr::AskKlineRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AskKlineData_, context, request, response, reactor);
}

void ZendataHandle::Stub::experimental_async::AskKlineData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zen_data_svr::AskKlineRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AskKlineData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zen_data_svr::AskKlineRsp>* ZendataHandle::Stub::AsyncAskKlineDataRaw(::grpc::ClientContext* context, const ::zen_data_svr::AskKlineReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zen_data_svr::AskKlineRsp>::Create(channel_.get(), cq, rpcmethod_AskKlineData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::zen_data_svr::AskKlineRsp>* ZendataHandle::Stub::PrepareAsyncAskKlineDataRaw(::grpc::ClientContext* context, const ::zen_data_svr::AskKlineReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zen_data_svr::AskKlineRsp>::Create(channel_.get(), cq, rpcmethod_AskKlineData_, context, request, false);
}

ZendataHandle::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZendataHandle_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZendataHandle::Service, ::zen_data_svr::PushKlineReq, ::zen_data_svr::PushKlineRsp>(
          std::mem_fn(&ZendataHandle::Service::PushKlineData), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZendataHandle_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZendataHandle::Service, ::zen_data_svr::AskKlineReq, ::zen_data_svr::AskKlineRsp>(
          std::mem_fn(&ZendataHandle::Service::AskKlineData), this)));
}

ZendataHandle::Service::~Service() {
}

::grpc::Status ZendataHandle::Service::PushKlineData(::grpc::ServerContext* context, const ::zen_data_svr::PushKlineReq* request, ::zen_data_svr::PushKlineRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZendataHandle::Service::AskKlineData(::grpc::ServerContext* context, const ::zen_data_svr::AskKlineReq* request, ::zen_data_svr::AskKlineRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace zen_data_svr

