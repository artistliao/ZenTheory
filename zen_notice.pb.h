// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zen_notice.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_zen_5fnotice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_zen_5fnotice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_zen_5fnotice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_zen_5fnotice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zen_5fnotice_2eproto;
namespace zen_notice {
class NoticeDrawReq;
class NoticeDrawReqDefaultTypeInternal;
extern NoticeDrawReqDefaultTypeInternal _NoticeDrawReq_default_instance_;
class NoticeDrawRsp;
class NoticeDrawRspDefaultTypeInternal;
extern NoticeDrawRspDefaultTypeInternal _NoticeDrawRsp_default_instance_;
class NoticeLineReq;
class NoticeLineReqDefaultTypeInternal;
extern NoticeLineReqDefaultTypeInternal _NoticeLineReq_default_instance_;
class NoticeLineRsp;
class NoticeLineRspDefaultTypeInternal;
extern NoticeLineRspDefaultTypeInternal _NoticeLineRsp_default_instance_;
class NoticeTradeReq;
class NoticeTradeReqDefaultTypeInternal;
extern NoticeTradeReqDefaultTypeInternal _NoticeTradeReq_default_instance_;
class NoticeTradeRsp;
class NoticeTradeRspDefaultTypeInternal;
extern NoticeTradeRspDefaultTypeInternal _NoticeTradeRsp_default_instance_;
}  // namespace zen_notice
PROTOBUF_NAMESPACE_OPEN
template<> ::zen_notice::NoticeDrawReq* Arena::CreateMaybeMessage<::zen_notice::NoticeDrawReq>(Arena*);
template<> ::zen_notice::NoticeDrawRsp* Arena::CreateMaybeMessage<::zen_notice::NoticeDrawRsp>(Arena*);
template<> ::zen_notice::NoticeLineReq* Arena::CreateMaybeMessage<::zen_notice::NoticeLineReq>(Arena*);
template<> ::zen_notice::NoticeLineRsp* Arena::CreateMaybeMessage<::zen_notice::NoticeLineRsp>(Arena*);
template<> ::zen_notice::NoticeTradeReq* Arena::CreateMaybeMessage<::zen_notice::NoticeTradeReq>(Arena*);
template<> ::zen_notice::NoticeTradeRsp* Arena::CreateMaybeMessage<::zen_notice::NoticeTradeRsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zen_notice {

// ===================================================================

class NoticeLineReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zen_notice.NoticeLineReq) */ {
 public:
  NoticeLineReq();
  virtual ~NoticeLineReq();

  NoticeLineReq(const NoticeLineReq& from);
  NoticeLineReq(NoticeLineReq&& from) noexcept
    : NoticeLineReq() {
    *this = ::std::move(from);
  }

  inline NoticeLineReq& operator=(const NoticeLineReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline NoticeLineReq& operator=(NoticeLineReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NoticeLineReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NoticeLineReq* internal_default_instance() {
    return reinterpret_cast<const NoticeLineReq*>(
               &_NoticeLineReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(NoticeLineReq* other);
  friend void swap(NoticeLineReq& a, NoticeLineReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NoticeLineReq* New() const final {
    return CreateMaybeMessage<NoticeLineReq>(nullptr);
  }

  NoticeLineReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NoticeLineReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NoticeLineReq& from);
  void MergeFrom(const NoticeLineReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NoticeLineReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zen_notice.NoticeLineReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zen_5fnotice_2eproto);
    return ::descriptor_table_zen_5fnotice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string period = 3;
  void clear_period();
  static const int kPeriodFieldNumber = 3;
  const std::string& period() const;
  void set_period(const std::string& value);
  void set_period(std::string&& value);
  void set_period(const char* value);
  void set_period(const char* value, size_t size);
  std::string* mutable_period();
  std::string* release_period();
  void set_allocated_period(std::string* period);

  // string sec_type = 10;
  void clear_sec_type();
  static const int kSecTypeFieldNumber = 10;
  const std::string& sec_type() const;
  void set_sec_type(const std::string& value);
  void set_sec_type(std::string&& value);
  void set_sec_type(const char* value);
  void set_sec_type(const char* value, size_t size);
  std::string* mutable_sec_type();
  std::string* release_sec_type();
  void set_allocated_sec_type(std::string* sec_type);

  // int32 trigger_ts = 4;
  void clear_trigger_ts();
  static const int kTriggerTsFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 trigger_ts() const;
  void set_trigger_ts(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 direction = 5;
  void clear_direction();
  static const int kDirectionFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 direction() const;
  void set_direction(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 line_start_ts = 6;
  void clear_line_start_ts();
  static const int kLineStartTsFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int32 line_start_ts() const;
  void set_line_start_ts(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 line_end_ts = 7;
  void clear_line_end_ts();
  static const int kLineEndTsFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::int32 line_end_ts() const;
  void set_line_end_ts(::PROTOBUF_NAMESPACE_ID::int32 value);

  // double high = 8;
  void clear_high();
  static const int kHighFieldNumber = 8;
  double high() const;
  void set_high(double value);

  // double low = 9;
  void clear_low();
  static const int kLowFieldNumber = 9;
  double low() const;
  void set_low(double value);

  // int32 kline_start_ts = 11;
  void clear_kline_start_ts();
  static const int kKlineStartTsFieldNumber = 11;
  ::PROTOBUF_NAMESPACE_ID::int32 kline_start_ts() const;
  void set_kline_start_ts(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:zen_notice.NoticeLineReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr period_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sec_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 trigger_ts_;
  ::PROTOBUF_NAMESPACE_ID::int32 direction_;
  ::PROTOBUF_NAMESPACE_ID::int32 line_start_ts_;
  ::PROTOBUF_NAMESPACE_ID::int32 line_end_ts_;
  double high_;
  double low_;
  ::PROTOBUF_NAMESPACE_ID::int32 kline_start_ts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zen_5fnotice_2eproto;
};
// -------------------------------------------------------------------

class NoticeLineRsp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zen_notice.NoticeLineRsp) */ {
 public:
  NoticeLineRsp();
  virtual ~NoticeLineRsp();

  NoticeLineRsp(const NoticeLineRsp& from);
  NoticeLineRsp(NoticeLineRsp&& from) noexcept
    : NoticeLineRsp() {
    *this = ::std::move(from);
  }

  inline NoticeLineRsp& operator=(const NoticeLineRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline NoticeLineRsp& operator=(NoticeLineRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NoticeLineRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NoticeLineRsp* internal_default_instance() {
    return reinterpret_cast<const NoticeLineRsp*>(
               &_NoticeLineRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(NoticeLineRsp* other);
  friend void swap(NoticeLineRsp& a, NoticeLineRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NoticeLineRsp* New() const final {
    return CreateMaybeMessage<NoticeLineRsp>(nullptr);
  }

  NoticeLineRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NoticeLineRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NoticeLineRsp& from);
  void MergeFrom(const NoticeLineRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NoticeLineRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zen_notice.NoticeLineRsp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zen_5fnotice_2eproto);
    return ::descriptor_table_zen_5fnotice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);

  // int32 status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:zen_notice.NoticeLineRsp)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zen_5fnotice_2eproto;
};
// -------------------------------------------------------------------

class NoticeDrawReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zen_notice.NoticeDrawReq) */ {
 public:
  NoticeDrawReq();
  virtual ~NoticeDrawReq();

  NoticeDrawReq(const NoticeDrawReq& from);
  NoticeDrawReq(NoticeDrawReq&& from) noexcept
    : NoticeDrawReq() {
    *this = ::std::move(from);
  }

  inline NoticeDrawReq& operator=(const NoticeDrawReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline NoticeDrawReq& operator=(NoticeDrawReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NoticeDrawReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NoticeDrawReq* internal_default_instance() {
    return reinterpret_cast<const NoticeDrawReq*>(
               &_NoticeDrawReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(NoticeDrawReq* other);
  friend void swap(NoticeDrawReq& a, NoticeDrawReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NoticeDrawReq* New() const final {
    return CreateMaybeMessage<NoticeDrawReq>(nullptr);
  }

  NoticeDrawReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NoticeDrawReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NoticeDrawReq& from);
  void MergeFrom(const NoticeDrawReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NoticeDrawReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zen_notice.NoticeDrawReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zen_5fnotice_2eproto);
    return ::descriptor_table_zen_5fnotice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string period = 3;
  void clear_period();
  static const int kPeriodFieldNumber = 3;
  const std::string& period() const;
  void set_period(const std::string& value);
  void set_period(std::string&& value);
  void set_period(const char* value);
  void set_period(const char* value, size_t size);
  std::string* mutable_period();
  std::string* release_period();
  void set_allocated_period(std::string* period);

  // int32 kline_start_ts = 4;
  void clear_kline_start_ts();
  static const int kKlineStartTsFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 kline_start_ts() const;
  void set_kline_start_ts(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:zen_notice.NoticeDrawReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr period_;
  ::PROTOBUF_NAMESPACE_ID::int32 kline_start_ts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zen_5fnotice_2eproto;
};
// -------------------------------------------------------------------

class NoticeDrawRsp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zen_notice.NoticeDrawRsp) */ {
 public:
  NoticeDrawRsp();
  virtual ~NoticeDrawRsp();

  NoticeDrawRsp(const NoticeDrawRsp& from);
  NoticeDrawRsp(NoticeDrawRsp&& from) noexcept
    : NoticeDrawRsp() {
    *this = ::std::move(from);
  }

  inline NoticeDrawRsp& operator=(const NoticeDrawRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline NoticeDrawRsp& operator=(NoticeDrawRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NoticeDrawRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NoticeDrawRsp* internal_default_instance() {
    return reinterpret_cast<const NoticeDrawRsp*>(
               &_NoticeDrawRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(NoticeDrawRsp* other);
  friend void swap(NoticeDrawRsp& a, NoticeDrawRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NoticeDrawRsp* New() const final {
    return CreateMaybeMessage<NoticeDrawRsp>(nullptr);
  }

  NoticeDrawRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NoticeDrawRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NoticeDrawRsp& from);
  void MergeFrom(const NoticeDrawRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NoticeDrawRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zen_notice.NoticeDrawRsp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zen_5fnotice_2eproto);
    return ::descriptor_table_zen_5fnotice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);

  // int32 status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:zen_notice.NoticeDrawRsp)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zen_5fnotice_2eproto;
};
// -------------------------------------------------------------------

class NoticeTradeReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zen_notice.NoticeTradeReq) */ {
 public:
  NoticeTradeReq();
  virtual ~NoticeTradeReq();

  NoticeTradeReq(const NoticeTradeReq& from);
  NoticeTradeReq(NoticeTradeReq&& from) noexcept
    : NoticeTradeReq() {
    *this = ::std::move(from);
  }

  inline NoticeTradeReq& operator=(const NoticeTradeReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline NoticeTradeReq& operator=(NoticeTradeReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NoticeTradeReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NoticeTradeReq* internal_default_instance() {
    return reinterpret_cast<const NoticeTradeReq*>(
               &_NoticeTradeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(NoticeTradeReq* other);
  friend void swap(NoticeTradeReq& a, NoticeTradeReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NoticeTradeReq* New() const final {
    return CreateMaybeMessage<NoticeTradeReq>(nullptr);
  }

  NoticeTradeReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NoticeTradeReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NoticeTradeReq& from);
  void MergeFrom(const NoticeTradeReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NoticeTradeReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zen_notice.NoticeTradeReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zen_5fnotice_2eproto);
    return ::descriptor_table_zen_5fnotice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);

  // string sec_type = 2;
  void clear_sec_type();
  static const int kSecTypeFieldNumber = 2;
  const std::string& sec_type() const;
  void set_sec_type(const std::string& value);
  void set_sec_type(std::string&& value);
  void set_sec_type(const char* value);
  void set_sec_type(const char* value, size_t size);
  std::string* mutable_sec_type();
  std::string* release_sec_type();
  void set_allocated_sec_type(std::string* sec_type);

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string period = 4;
  void clear_period();
  static const int kPeriodFieldNumber = 4;
  const std::string& period() const;
  void set_period(const std::string& value);
  void set_period(std::string&& value);
  void set_period(const char* value);
  void set_period(const char* value, size_t size);
  std::string* mutable_period();
  std::string* release_period();
  void set_allocated_period(std::string* period);

  // string ext_info = 12;
  void clear_ext_info();
  static const int kExtInfoFieldNumber = 12;
  const std::string& ext_info() const;
  void set_ext_info(const std::string& value);
  void set_ext_info(std::string&& value);
  void set_ext_info(const char* value);
  void set_ext_info(const char* value, size_t size);
  std::string* mutable_ext_info();
  std::string* release_ext_info();
  void set_allocated_ext_info(std::string* ext_info);

  // int32 trade_type = 5;
  void clear_trade_type();
  static const int kTradeTypeFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 trade_type() const;
  void set_trade_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 open_cover_type = 6;
  void clear_open_cover_type();
  static const int kOpenCoverTypeFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int32 open_cover_type() const;
  void set_open_cover_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 direction = 7;
  void clear_direction();
  static const int kDirectionFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::int32 direction() const;
  void set_direction(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 trigger_ts = 8;
  void clear_trigger_ts();
  static const int kTriggerTsFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::int32 trigger_ts() const;
  void set_trigger_ts(::PROTOBUF_NAMESPACE_ID::int32 value);

  // double price = 10;
  void clear_price();
  static const int kPriceFieldNumber = 10;
  double price() const;
  void set_price(double value);

  // double stop_loss_price = 11;
  void clear_stop_loss_price();
  static const int kStopLossPriceFieldNumber = 11;
  double stop_loss_price() const;
  void set_stop_loss_price(double value);

  // int32 kline_start_ts = 9;
  void clear_kline_start_ts();
  static const int kKlineStartTsFieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::int32 kline_start_ts() const;
  void set_kline_start_ts(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:zen_notice.NoticeTradeReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sec_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr period_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ext_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 trade_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 open_cover_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 direction_;
  ::PROTOBUF_NAMESPACE_ID::int32 trigger_ts_;
  double price_;
  double stop_loss_price_;
  ::PROTOBUF_NAMESPACE_ID::int32 kline_start_ts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zen_5fnotice_2eproto;
};
// -------------------------------------------------------------------

class NoticeTradeRsp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zen_notice.NoticeTradeRsp) */ {
 public:
  NoticeTradeRsp();
  virtual ~NoticeTradeRsp();

  NoticeTradeRsp(const NoticeTradeRsp& from);
  NoticeTradeRsp(NoticeTradeRsp&& from) noexcept
    : NoticeTradeRsp() {
    *this = ::std::move(from);
  }

  inline NoticeTradeRsp& operator=(const NoticeTradeRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline NoticeTradeRsp& operator=(NoticeTradeRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NoticeTradeRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NoticeTradeRsp* internal_default_instance() {
    return reinterpret_cast<const NoticeTradeRsp*>(
               &_NoticeTradeRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(NoticeTradeRsp* other);
  friend void swap(NoticeTradeRsp& a, NoticeTradeRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NoticeTradeRsp* New() const final {
    return CreateMaybeMessage<NoticeTradeRsp>(nullptr);
  }

  NoticeTradeRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NoticeTradeRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NoticeTradeRsp& from);
  void MergeFrom(const NoticeTradeRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NoticeTradeRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zen_notice.NoticeTradeRsp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zen_5fnotice_2eproto);
    return ::descriptor_table_zen_5fnotice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);

  // int32 status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:zen_notice.NoticeTradeRsp)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zen_5fnotice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NoticeLineReq

// string code = 1;
inline void NoticeLineReq::clear_code() {
  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NoticeLineReq::code() const {
  // @@protoc_insertion_point(field_get:zen_notice.NoticeLineReq.code)
  return code_.GetNoArena();
}
inline void NoticeLineReq::set_code(const std::string& value) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zen_notice.NoticeLineReq.code)
}
inline void NoticeLineReq::set_code(std::string&& value) {
  
  code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zen_notice.NoticeLineReq.code)
}
inline void NoticeLineReq::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zen_notice.NoticeLineReq.code)
}
inline void NoticeLineReq::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zen_notice.NoticeLineReq.code)
}
inline std::string* NoticeLineReq::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:zen_notice.NoticeLineReq.code)
  return code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NoticeLineReq::release_code() {
  // @@protoc_insertion_point(field_release:zen_notice.NoticeLineReq.code)
  
  return code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NoticeLineReq::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:zen_notice.NoticeLineReq.code)
}

// string name = 2;
inline void NoticeLineReq::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NoticeLineReq::name() const {
  // @@protoc_insertion_point(field_get:zen_notice.NoticeLineReq.name)
  return name_.GetNoArena();
}
inline void NoticeLineReq::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zen_notice.NoticeLineReq.name)
}
inline void NoticeLineReq::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zen_notice.NoticeLineReq.name)
}
inline void NoticeLineReq::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zen_notice.NoticeLineReq.name)
}
inline void NoticeLineReq::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zen_notice.NoticeLineReq.name)
}
inline std::string* NoticeLineReq::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:zen_notice.NoticeLineReq.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NoticeLineReq::release_name() {
  // @@protoc_insertion_point(field_release:zen_notice.NoticeLineReq.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NoticeLineReq::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:zen_notice.NoticeLineReq.name)
}

// string period = 3;
inline void NoticeLineReq::clear_period() {
  period_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NoticeLineReq::period() const {
  // @@protoc_insertion_point(field_get:zen_notice.NoticeLineReq.period)
  return period_.GetNoArena();
}
inline void NoticeLineReq::set_period(const std::string& value) {
  
  period_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zen_notice.NoticeLineReq.period)
}
inline void NoticeLineReq::set_period(std::string&& value) {
  
  period_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zen_notice.NoticeLineReq.period)
}
inline void NoticeLineReq::set_period(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  period_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zen_notice.NoticeLineReq.period)
}
inline void NoticeLineReq::set_period(const char* value, size_t size) {
  
  period_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zen_notice.NoticeLineReq.period)
}
inline std::string* NoticeLineReq::mutable_period() {
  
  // @@protoc_insertion_point(field_mutable:zen_notice.NoticeLineReq.period)
  return period_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NoticeLineReq::release_period() {
  // @@protoc_insertion_point(field_release:zen_notice.NoticeLineReq.period)
  
  return period_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NoticeLineReq::set_allocated_period(std::string* period) {
  if (period != nullptr) {
    
  } else {
    
  }
  period_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), period);
  // @@protoc_insertion_point(field_set_allocated:zen_notice.NoticeLineReq.period)
}

// int32 trigger_ts = 4;
inline void NoticeLineReq::clear_trigger_ts() {
  trigger_ts_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NoticeLineReq::trigger_ts() const {
  // @@protoc_insertion_point(field_get:zen_notice.NoticeLineReq.trigger_ts)
  return trigger_ts_;
}
inline void NoticeLineReq::set_trigger_ts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  trigger_ts_ = value;
  // @@protoc_insertion_point(field_set:zen_notice.NoticeLineReq.trigger_ts)
}

// int32 direction = 5;
inline void NoticeLineReq::clear_direction() {
  direction_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NoticeLineReq::direction() const {
  // @@protoc_insertion_point(field_get:zen_notice.NoticeLineReq.direction)
  return direction_;
}
inline void NoticeLineReq::set_direction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  direction_ = value;
  // @@protoc_insertion_point(field_set:zen_notice.NoticeLineReq.direction)
}

// int32 line_start_ts = 6;
inline void NoticeLineReq::clear_line_start_ts() {
  line_start_ts_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NoticeLineReq::line_start_ts() const {
  // @@protoc_insertion_point(field_get:zen_notice.NoticeLineReq.line_start_ts)
  return line_start_ts_;
}
inline void NoticeLineReq::set_line_start_ts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  line_start_ts_ = value;
  // @@protoc_insertion_point(field_set:zen_notice.NoticeLineReq.line_start_ts)
}

// int32 line_end_ts = 7;
inline void NoticeLineReq::clear_line_end_ts() {
  line_end_ts_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NoticeLineReq::line_end_ts() const {
  // @@protoc_insertion_point(field_get:zen_notice.NoticeLineReq.line_end_ts)
  return line_end_ts_;
}
inline void NoticeLineReq::set_line_end_ts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  line_end_ts_ = value;
  // @@protoc_insertion_point(field_set:zen_notice.NoticeLineReq.line_end_ts)
}

// double high = 8;
inline void NoticeLineReq::clear_high() {
  high_ = 0;
}
inline double NoticeLineReq::high() const {
  // @@protoc_insertion_point(field_get:zen_notice.NoticeLineReq.high)
  return high_;
}
inline void NoticeLineReq::set_high(double value) {
  
  high_ = value;
  // @@protoc_insertion_point(field_set:zen_notice.NoticeLineReq.high)
}

// double low = 9;
inline void NoticeLineReq::clear_low() {
  low_ = 0;
}
inline double NoticeLineReq::low() const {
  // @@protoc_insertion_point(field_get:zen_notice.NoticeLineReq.low)
  return low_;
}
inline void NoticeLineReq::set_low(double value) {
  
  low_ = value;
  // @@protoc_insertion_point(field_set:zen_notice.NoticeLineReq.low)
}

// string sec_type = 10;
inline void NoticeLineReq::clear_sec_type() {
  sec_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NoticeLineReq::sec_type() const {
  // @@protoc_insertion_point(field_get:zen_notice.NoticeLineReq.sec_type)
  return sec_type_.GetNoArena();
}
inline void NoticeLineReq::set_sec_type(const std::string& value) {
  
  sec_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zen_notice.NoticeLineReq.sec_type)
}
inline void NoticeLineReq::set_sec_type(std::string&& value) {
  
  sec_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zen_notice.NoticeLineReq.sec_type)
}
inline void NoticeLineReq::set_sec_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sec_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zen_notice.NoticeLineReq.sec_type)
}
inline void NoticeLineReq::set_sec_type(const char* value, size_t size) {
  
  sec_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zen_notice.NoticeLineReq.sec_type)
}
inline std::string* NoticeLineReq::mutable_sec_type() {
  
  // @@protoc_insertion_point(field_mutable:zen_notice.NoticeLineReq.sec_type)
  return sec_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NoticeLineReq::release_sec_type() {
  // @@protoc_insertion_point(field_release:zen_notice.NoticeLineReq.sec_type)
  
  return sec_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NoticeLineReq::set_allocated_sec_type(std::string* sec_type) {
  if (sec_type != nullptr) {
    
  } else {
    
  }
  sec_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sec_type);
  // @@protoc_insertion_point(field_set_allocated:zen_notice.NoticeLineReq.sec_type)
}

// int32 kline_start_ts = 11;
inline void NoticeLineReq::clear_kline_start_ts() {
  kline_start_ts_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NoticeLineReq::kline_start_ts() const {
  // @@protoc_insertion_point(field_get:zen_notice.NoticeLineReq.kline_start_ts)
  return kline_start_ts_;
}
inline void NoticeLineReq::set_kline_start_ts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  kline_start_ts_ = value;
  // @@protoc_insertion_point(field_set:zen_notice.NoticeLineReq.kline_start_ts)
}

// -------------------------------------------------------------------

// NoticeLineRsp

// int32 status = 1;
inline void NoticeLineRsp::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NoticeLineRsp::status() const {
  // @@protoc_insertion_point(field_get:zen_notice.NoticeLineRsp.status)
  return status_;
}
inline void NoticeLineRsp::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:zen_notice.NoticeLineRsp.status)
}

// string message = 2;
inline void NoticeLineRsp::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NoticeLineRsp::message() const {
  // @@protoc_insertion_point(field_get:zen_notice.NoticeLineRsp.message)
  return message_.GetNoArena();
}
inline void NoticeLineRsp::set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zen_notice.NoticeLineRsp.message)
}
inline void NoticeLineRsp::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zen_notice.NoticeLineRsp.message)
}
inline void NoticeLineRsp::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zen_notice.NoticeLineRsp.message)
}
inline void NoticeLineRsp::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zen_notice.NoticeLineRsp.message)
}
inline std::string* NoticeLineRsp::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:zen_notice.NoticeLineRsp.message)
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NoticeLineRsp::release_message() {
  // @@protoc_insertion_point(field_release:zen_notice.NoticeLineRsp.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NoticeLineRsp::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:zen_notice.NoticeLineRsp.message)
}

// -------------------------------------------------------------------

// NoticeDrawReq

// string code = 1;
inline void NoticeDrawReq::clear_code() {
  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NoticeDrawReq::code() const {
  // @@protoc_insertion_point(field_get:zen_notice.NoticeDrawReq.code)
  return code_.GetNoArena();
}
inline void NoticeDrawReq::set_code(const std::string& value) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zen_notice.NoticeDrawReq.code)
}
inline void NoticeDrawReq::set_code(std::string&& value) {
  
  code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zen_notice.NoticeDrawReq.code)
}
inline void NoticeDrawReq::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zen_notice.NoticeDrawReq.code)
}
inline void NoticeDrawReq::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zen_notice.NoticeDrawReq.code)
}
inline std::string* NoticeDrawReq::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:zen_notice.NoticeDrawReq.code)
  return code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NoticeDrawReq::release_code() {
  // @@protoc_insertion_point(field_release:zen_notice.NoticeDrawReq.code)
  
  return code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NoticeDrawReq::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:zen_notice.NoticeDrawReq.code)
}

// string name = 2;
inline void NoticeDrawReq::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NoticeDrawReq::name() const {
  // @@protoc_insertion_point(field_get:zen_notice.NoticeDrawReq.name)
  return name_.GetNoArena();
}
inline void NoticeDrawReq::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zen_notice.NoticeDrawReq.name)
}
inline void NoticeDrawReq::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zen_notice.NoticeDrawReq.name)
}
inline void NoticeDrawReq::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zen_notice.NoticeDrawReq.name)
}
inline void NoticeDrawReq::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zen_notice.NoticeDrawReq.name)
}
inline std::string* NoticeDrawReq::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:zen_notice.NoticeDrawReq.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NoticeDrawReq::release_name() {
  // @@protoc_insertion_point(field_release:zen_notice.NoticeDrawReq.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NoticeDrawReq::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:zen_notice.NoticeDrawReq.name)
}

// string period = 3;
inline void NoticeDrawReq::clear_period() {
  period_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NoticeDrawReq::period() const {
  // @@protoc_insertion_point(field_get:zen_notice.NoticeDrawReq.period)
  return period_.GetNoArena();
}
inline void NoticeDrawReq::set_period(const std::string& value) {
  
  period_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zen_notice.NoticeDrawReq.period)
}
inline void NoticeDrawReq::set_period(std::string&& value) {
  
  period_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zen_notice.NoticeDrawReq.period)
}
inline void NoticeDrawReq::set_period(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  period_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zen_notice.NoticeDrawReq.period)
}
inline void NoticeDrawReq::set_period(const char* value, size_t size) {
  
  period_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zen_notice.NoticeDrawReq.period)
}
inline std::string* NoticeDrawReq::mutable_period() {
  
  // @@protoc_insertion_point(field_mutable:zen_notice.NoticeDrawReq.period)
  return period_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NoticeDrawReq::release_period() {
  // @@protoc_insertion_point(field_release:zen_notice.NoticeDrawReq.period)
  
  return period_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NoticeDrawReq::set_allocated_period(std::string* period) {
  if (period != nullptr) {
    
  } else {
    
  }
  period_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), period);
  // @@protoc_insertion_point(field_set_allocated:zen_notice.NoticeDrawReq.period)
}

// int32 kline_start_ts = 4;
inline void NoticeDrawReq::clear_kline_start_ts() {
  kline_start_ts_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NoticeDrawReq::kline_start_ts() const {
  // @@protoc_insertion_point(field_get:zen_notice.NoticeDrawReq.kline_start_ts)
  return kline_start_ts_;
}
inline void NoticeDrawReq::set_kline_start_ts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  kline_start_ts_ = value;
  // @@protoc_insertion_point(field_set:zen_notice.NoticeDrawReq.kline_start_ts)
}

// -------------------------------------------------------------------

// NoticeDrawRsp

// int32 status = 1;
inline void NoticeDrawRsp::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NoticeDrawRsp::status() const {
  // @@protoc_insertion_point(field_get:zen_notice.NoticeDrawRsp.status)
  return status_;
}
inline void NoticeDrawRsp::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:zen_notice.NoticeDrawRsp.status)
}

// string message = 2;
inline void NoticeDrawRsp::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NoticeDrawRsp::message() const {
  // @@protoc_insertion_point(field_get:zen_notice.NoticeDrawRsp.message)
  return message_.GetNoArena();
}
inline void NoticeDrawRsp::set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zen_notice.NoticeDrawRsp.message)
}
inline void NoticeDrawRsp::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zen_notice.NoticeDrawRsp.message)
}
inline void NoticeDrawRsp::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zen_notice.NoticeDrawRsp.message)
}
inline void NoticeDrawRsp::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zen_notice.NoticeDrawRsp.message)
}
inline std::string* NoticeDrawRsp::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:zen_notice.NoticeDrawRsp.message)
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NoticeDrawRsp::release_message() {
  // @@protoc_insertion_point(field_release:zen_notice.NoticeDrawRsp.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NoticeDrawRsp::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:zen_notice.NoticeDrawRsp.message)
}

// -------------------------------------------------------------------

// NoticeTradeReq

// string code = 1;
inline void NoticeTradeReq::clear_code() {
  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NoticeTradeReq::code() const {
  // @@protoc_insertion_point(field_get:zen_notice.NoticeTradeReq.code)
  return code_.GetNoArena();
}
inline void NoticeTradeReq::set_code(const std::string& value) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zen_notice.NoticeTradeReq.code)
}
inline void NoticeTradeReq::set_code(std::string&& value) {
  
  code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zen_notice.NoticeTradeReq.code)
}
inline void NoticeTradeReq::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zen_notice.NoticeTradeReq.code)
}
inline void NoticeTradeReq::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zen_notice.NoticeTradeReq.code)
}
inline std::string* NoticeTradeReq::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:zen_notice.NoticeTradeReq.code)
  return code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NoticeTradeReq::release_code() {
  // @@protoc_insertion_point(field_release:zen_notice.NoticeTradeReq.code)
  
  return code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NoticeTradeReq::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:zen_notice.NoticeTradeReq.code)
}

// string sec_type = 2;
inline void NoticeTradeReq::clear_sec_type() {
  sec_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NoticeTradeReq::sec_type() const {
  // @@protoc_insertion_point(field_get:zen_notice.NoticeTradeReq.sec_type)
  return sec_type_.GetNoArena();
}
inline void NoticeTradeReq::set_sec_type(const std::string& value) {
  
  sec_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zen_notice.NoticeTradeReq.sec_type)
}
inline void NoticeTradeReq::set_sec_type(std::string&& value) {
  
  sec_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zen_notice.NoticeTradeReq.sec_type)
}
inline void NoticeTradeReq::set_sec_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sec_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zen_notice.NoticeTradeReq.sec_type)
}
inline void NoticeTradeReq::set_sec_type(const char* value, size_t size) {
  
  sec_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zen_notice.NoticeTradeReq.sec_type)
}
inline std::string* NoticeTradeReq::mutable_sec_type() {
  
  // @@protoc_insertion_point(field_mutable:zen_notice.NoticeTradeReq.sec_type)
  return sec_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NoticeTradeReq::release_sec_type() {
  // @@protoc_insertion_point(field_release:zen_notice.NoticeTradeReq.sec_type)
  
  return sec_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NoticeTradeReq::set_allocated_sec_type(std::string* sec_type) {
  if (sec_type != nullptr) {
    
  } else {
    
  }
  sec_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sec_type);
  // @@protoc_insertion_point(field_set_allocated:zen_notice.NoticeTradeReq.sec_type)
}

// string name = 3;
inline void NoticeTradeReq::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NoticeTradeReq::name() const {
  // @@protoc_insertion_point(field_get:zen_notice.NoticeTradeReq.name)
  return name_.GetNoArena();
}
inline void NoticeTradeReq::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zen_notice.NoticeTradeReq.name)
}
inline void NoticeTradeReq::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zen_notice.NoticeTradeReq.name)
}
inline void NoticeTradeReq::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zen_notice.NoticeTradeReq.name)
}
inline void NoticeTradeReq::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zen_notice.NoticeTradeReq.name)
}
inline std::string* NoticeTradeReq::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:zen_notice.NoticeTradeReq.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NoticeTradeReq::release_name() {
  // @@protoc_insertion_point(field_release:zen_notice.NoticeTradeReq.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NoticeTradeReq::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:zen_notice.NoticeTradeReq.name)
}

// string period = 4;
inline void NoticeTradeReq::clear_period() {
  period_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NoticeTradeReq::period() const {
  // @@protoc_insertion_point(field_get:zen_notice.NoticeTradeReq.period)
  return period_.GetNoArena();
}
inline void NoticeTradeReq::set_period(const std::string& value) {
  
  period_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zen_notice.NoticeTradeReq.period)
}
inline void NoticeTradeReq::set_period(std::string&& value) {
  
  period_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zen_notice.NoticeTradeReq.period)
}
inline void NoticeTradeReq::set_period(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  period_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zen_notice.NoticeTradeReq.period)
}
inline void NoticeTradeReq::set_period(const char* value, size_t size) {
  
  period_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zen_notice.NoticeTradeReq.period)
}
inline std::string* NoticeTradeReq::mutable_period() {
  
  // @@protoc_insertion_point(field_mutable:zen_notice.NoticeTradeReq.period)
  return period_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NoticeTradeReq::release_period() {
  // @@protoc_insertion_point(field_release:zen_notice.NoticeTradeReq.period)
  
  return period_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NoticeTradeReq::set_allocated_period(std::string* period) {
  if (period != nullptr) {
    
  } else {
    
  }
  period_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), period);
  // @@protoc_insertion_point(field_set_allocated:zen_notice.NoticeTradeReq.period)
}

// int32 trade_type = 5;
inline void NoticeTradeReq::clear_trade_type() {
  trade_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NoticeTradeReq::trade_type() const {
  // @@protoc_insertion_point(field_get:zen_notice.NoticeTradeReq.trade_type)
  return trade_type_;
}
inline void NoticeTradeReq::set_trade_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  trade_type_ = value;
  // @@protoc_insertion_point(field_set:zen_notice.NoticeTradeReq.trade_type)
}

// int32 open_cover_type = 6;
inline void NoticeTradeReq::clear_open_cover_type() {
  open_cover_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NoticeTradeReq::open_cover_type() const {
  // @@protoc_insertion_point(field_get:zen_notice.NoticeTradeReq.open_cover_type)
  return open_cover_type_;
}
inline void NoticeTradeReq::set_open_cover_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  open_cover_type_ = value;
  // @@protoc_insertion_point(field_set:zen_notice.NoticeTradeReq.open_cover_type)
}

// int32 direction = 7;
inline void NoticeTradeReq::clear_direction() {
  direction_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NoticeTradeReq::direction() const {
  // @@protoc_insertion_point(field_get:zen_notice.NoticeTradeReq.direction)
  return direction_;
}
inline void NoticeTradeReq::set_direction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  direction_ = value;
  // @@protoc_insertion_point(field_set:zen_notice.NoticeTradeReq.direction)
}

// int32 trigger_ts = 8;
inline void NoticeTradeReq::clear_trigger_ts() {
  trigger_ts_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NoticeTradeReq::trigger_ts() const {
  // @@protoc_insertion_point(field_get:zen_notice.NoticeTradeReq.trigger_ts)
  return trigger_ts_;
}
inline void NoticeTradeReq::set_trigger_ts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  trigger_ts_ = value;
  // @@protoc_insertion_point(field_set:zen_notice.NoticeTradeReq.trigger_ts)
}

// int32 kline_start_ts = 9;
inline void NoticeTradeReq::clear_kline_start_ts() {
  kline_start_ts_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NoticeTradeReq::kline_start_ts() const {
  // @@protoc_insertion_point(field_get:zen_notice.NoticeTradeReq.kline_start_ts)
  return kline_start_ts_;
}
inline void NoticeTradeReq::set_kline_start_ts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  kline_start_ts_ = value;
  // @@protoc_insertion_point(field_set:zen_notice.NoticeTradeReq.kline_start_ts)
}

// double price = 10;
inline void NoticeTradeReq::clear_price() {
  price_ = 0;
}
inline double NoticeTradeReq::price() const {
  // @@protoc_insertion_point(field_get:zen_notice.NoticeTradeReq.price)
  return price_;
}
inline void NoticeTradeReq::set_price(double value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:zen_notice.NoticeTradeReq.price)
}

// double stop_loss_price = 11;
inline void NoticeTradeReq::clear_stop_loss_price() {
  stop_loss_price_ = 0;
}
inline double NoticeTradeReq::stop_loss_price() const {
  // @@protoc_insertion_point(field_get:zen_notice.NoticeTradeReq.stop_loss_price)
  return stop_loss_price_;
}
inline void NoticeTradeReq::set_stop_loss_price(double value) {
  
  stop_loss_price_ = value;
  // @@protoc_insertion_point(field_set:zen_notice.NoticeTradeReq.stop_loss_price)
}

// string ext_info = 12;
inline void NoticeTradeReq::clear_ext_info() {
  ext_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NoticeTradeReq::ext_info() const {
  // @@protoc_insertion_point(field_get:zen_notice.NoticeTradeReq.ext_info)
  return ext_info_.GetNoArena();
}
inline void NoticeTradeReq::set_ext_info(const std::string& value) {
  
  ext_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zen_notice.NoticeTradeReq.ext_info)
}
inline void NoticeTradeReq::set_ext_info(std::string&& value) {
  
  ext_info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zen_notice.NoticeTradeReq.ext_info)
}
inline void NoticeTradeReq::set_ext_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ext_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zen_notice.NoticeTradeReq.ext_info)
}
inline void NoticeTradeReq::set_ext_info(const char* value, size_t size) {
  
  ext_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zen_notice.NoticeTradeReq.ext_info)
}
inline std::string* NoticeTradeReq::mutable_ext_info() {
  
  // @@protoc_insertion_point(field_mutable:zen_notice.NoticeTradeReq.ext_info)
  return ext_info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NoticeTradeReq::release_ext_info() {
  // @@protoc_insertion_point(field_release:zen_notice.NoticeTradeReq.ext_info)
  
  return ext_info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NoticeTradeReq::set_allocated_ext_info(std::string* ext_info) {
  if (ext_info != nullptr) {
    
  } else {
    
  }
  ext_info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ext_info);
  // @@protoc_insertion_point(field_set_allocated:zen_notice.NoticeTradeReq.ext_info)
}

// -------------------------------------------------------------------

// NoticeTradeRsp

// int32 status = 1;
inline void NoticeTradeRsp::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NoticeTradeRsp::status() const {
  // @@protoc_insertion_point(field_get:zen_notice.NoticeTradeRsp.status)
  return status_;
}
inline void NoticeTradeRsp::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:zen_notice.NoticeTradeRsp.status)
}

// string message = 2;
inline void NoticeTradeRsp::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NoticeTradeRsp::message() const {
  // @@protoc_insertion_point(field_get:zen_notice.NoticeTradeRsp.message)
  return message_.GetNoArena();
}
inline void NoticeTradeRsp::set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zen_notice.NoticeTradeRsp.message)
}
inline void NoticeTradeRsp::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zen_notice.NoticeTradeRsp.message)
}
inline void NoticeTradeRsp::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zen_notice.NoticeTradeRsp.message)
}
inline void NoticeTradeRsp::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zen_notice.NoticeTradeRsp.message)
}
inline std::string* NoticeTradeRsp::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:zen_notice.NoticeTradeRsp.message)
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NoticeTradeRsp::release_message() {
  // @@protoc_insertion_point(field_release:zen_notice.NoticeTradeRsp.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NoticeTradeRsp::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:zen_notice.NoticeTradeRsp.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace zen_notice

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_zen_5fnotice_2eproto
