// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: secdata_transfer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_secdata_5ftransfer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_secdata_5ftransfer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_secdata_5ftransfer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_secdata_5ftransfer_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_secdata_5ftransfer_2eproto;
namespace secdata_transfer {
class AskKlineReq;
class AskKlineReqDefaultTypeInternal;
extern AskKlineReqDefaultTypeInternal _AskKlineReq_default_instance_;
class AskKlineRsp;
class AskKlineRspDefaultTypeInternal;
extern AskKlineRspDefaultTypeInternal _AskKlineRsp_default_instance_;
class Kline;
class KlineDefaultTypeInternal;
extern KlineDefaultTypeInternal _Kline_default_instance_;
class KlineReply;
class KlineReplyDefaultTypeInternal;
extern KlineReplyDefaultTypeInternal _KlineReply_default_instance_;
class KlineRequest;
class KlineRequestDefaultTypeInternal;
extern KlineRequestDefaultTypeInternal _KlineRequest_default_instance_;
}  // namespace secdata_transfer
PROTOBUF_NAMESPACE_OPEN
template<> ::secdata_transfer::AskKlineReq* Arena::CreateMaybeMessage<::secdata_transfer::AskKlineReq>(Arena*);
template<> ::secdata_transfer::AskKlineRsp* Arena::CreateMaybeMessage<::secdata_transfer::AskKlineRsp>(Arena*);
template<> ::secdata_transfer::Kline* Arena::CreateMaybeMessage<::secdata_transfer::Kline>(Arena*);
template<> ::secdata_transfer::KlineReply* Arena::CreateMaybeMessage<::secdata_transfer::KlineReply>(Arena*);
template<> ::secdata_transfer::KlineRequest* Arena::CreateMaybeMessage<::secdata_transfer::KlineRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace secdata_transfer {

// ===================================================================

class KlineRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:secdata_transfer.KlineRequest) */ {
 public:
  KlineRequest();
  virtual ~KlineRequest();

  KlineRequest(const KlineRequest& from);
  KlineRequest(KlineRequest&& from) noexcept
    : KlineRequest() {
    *this = ::std::move(from);
  }

  inline KlineRequest& operator=(const KlineRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline KlineRequest& operator=(KlineRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KlineRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KlineRequest* internal_default_instance() {
    return reinterpret_cast<const KlineRequest*>(
               &_KlineRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(KlineRequest* other);
  friend void swap(KlineRequest& a, KlineRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KlineRequest* New() const final {
    return CreateMaybeMessage<KlineRequest>(nullptr);
  }

  KlineRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KlineRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KlineRequest& from);
  void MergeFrom(const KlineRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KlineRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "secdata_transfer.KlineRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_secdata_5ftransfer_2eproto);
    return ::descriptor_table_secdata_5ftransfer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string code = 2;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);

  // string period = 3;
  void clear_period();
  static const int kPeriodFieldNumber = 3;
  const std::string& period() const;
  void set_period(const std::string& value);
  void set_period(std::string&& value);
  void set_period(const char* value);
  void set_period(const char* value, size_t size);
  std::string* mutable_period();
  std::string* release_period();
  void set_allocated_period(std::string* period);

  // double open = 4;
  void clear_open();
  static const int kOpenFieldNumber = 4;
  double open() const;
  void set_open(double value);

  // double high = 5;
  void clear_high();
  static const int kHighFieldNumber = 5;
  double high() const;
  void set_high(double value);

  // double low = 6;
  void clear_low();
  static const int kLowFieldNumber = 6;
  double low() const;
  void set_low(double value);

  // double close = 7;
  void clear_close();
  static const int kCloseFieldNumber = 7;
  double close() const;
  void set_close(double value);

  // int64 vol = 8;
  void clear_vol();
  static const int kVolFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::int64 vol() const;
  void set_vol(::PROTOBUF_NAMESPACE_ID::int64 value);

  // double amount = 9;
  void clear_amount();
  static const int kAmountFieldNumber = 9;
  double amount() const;
  void set_amount(double value);

  // int32 ts = 1;
  void clear_ts();
  static const int kTsFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 ts() const;
  void set_ts(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:secdata_transfer.KlineRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr period_;
  double open_;
  double high_;
  double low_;
  double close_;
  ::PROTOBUF_NAMESPACE_ID::int64 vol_;
  double amount_;
  ::PROTOBUF_NAMESPACE_ID::int32 ts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_secdata_5ftransfer_2eproto;
};
// -------------------------------------------------------------------

class KlineReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:secdata_transfer.KlineReply) */ {
 public:
  KlineReply();
  virtual ~KlineReply();

  KlineReply(const KlineReply& from);
  KlineReply(KlineReply&& from) noexcept
    : KlineReply() {
    *this = ::std::move(from);
  }

  inline KlineReply& operator=(const KlineReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline KlineReply& operator=(KlineReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KlineReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KlineReply* internal_default_instance() {
    return reinterpret_cast<const KlineReply*>(
               &_KlineReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(KlineReply* other);
  friend void swap(KlineReply& a, KlineReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KlineReply* New() const final {
    return CreateMaybeMessage<KlineReply>(nullptr);
  }

  KlineReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KlineReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KlineReply& from);
  void MergeFrom(const KlineReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KlineReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "secdata_transfer.KlineReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_secdata_5ftransfer_2eproto);
    return ::descriptor_table_secdata_5ftransfer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);

  // int32 status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:secdata_transfer.KlineReply)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_secdata_5ftransfer_2eproto;
};
// -------------------------------------------------------------------

class AskKlineReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:secdata_transfer.AskKlineReq) */ {
 public:
  AskKlineReq();
  virtual ~AskKlineReq();

  AskKlineReq(const AskKlineReq& from);
  AskKlineReq(AskKlineReq&& from) noexcept
    : AskKlineReq() {
    *this = ::std::move(from);
  }

  inline AskKlineReq& operator=(const AskKlineReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AskKlineReq& operator=(AskKlineReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AskKlineReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AskKlineReq* internal_default_instance() {
    return reinterpret_cast<const AskKlineReq*>(
               &_AskKlineReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(AskKlineReq* other);
  friend void swap(AskKlineReq& a, AskKlineReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AskKlineReq* New() const final {
    return CreateMaybeMessage<AskKlineReq>(nullptr);
  }

  AskKlineReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AskKlineReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AskKlineReq& from);
  void MergeFrom(const AskKlineReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AskKlineReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "secdata_transfer.AskKlineReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_secdata_5ftransfer_2eproto);
    return ::descriptor_table_secdata_5ftransfer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);

  // string period = 2;
  void clear_period();
  static const int kPeriodFieldNumber = 2;
  const std::string& period() const;
  void set_period(const std::string& value);
  void set_period(std::string&& value);
  void set_period(const char* value);
  void set_period(const char* value, size_t size);
  std::string* mutable_period();
  std::string* release_period();
  void set_allocated_period(std::string* period);

  // int32 from_ts = 3;
  void clear_from_ts();
  static const int kFromTsFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 from_ts() const;
  void set_from_ts(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 to_ts = 4;
  void clear_to_ts();
  static const int kToTsFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 to_ts() const;
  void set_to_ts(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:secdata_transfer.AskKlineReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr period_;
  ::PROTOBUF_NAMESPACE_ID::int32 from_ts_;
  ::PROTOBUF_NAMESPACE_ID::int32 to_ts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_secdata_5ftransfer_2eproto;
};
// -------------------------------------------------------------------

class Kline :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:secdata_transfer.Kline) */ {
 public:
  Kline();
  virtual ~Kline();

  Kline(const Kline& from);
  Kline(Kline&& from) noexcept
    : Kline() {
    *this = ::std::move(from);
  }

  inline Kline& operator=(const Kline& from) {
    CopyFrom(from);
    return *this;
  }
  inline Kline& operator=(Kline&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Kline& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Kline* internal_default_instance() {
    return reinterpret_cast<const Kline*>(
               &_Kline_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Kline* other);
  friend void swap(Kline& a, Kline& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Kline* New() const final {
    return CreateMaybeMessage<Kline>(nullptr);
  }

  Kline* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Kline>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Kline& from);
  void MergeFrom(const Kline& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Kline* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "secdata_transfer.Kline";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_secdata_5ftransfer_2eproto);
    return ::descriptor_table_secdata_5ftransfer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double open = 2;
  void clear_open();
  static const int kOpenFieldNumber = 2;
  double open() const;
  void set_open(double value);

  // double high = 3;
  void clear_high();
  static const int kHighFieldNumber = 3;
  double high() const;
  void set_high(double value);

  // double low = 4;
  void clear_low();
  static const int kLowFieldNumber = 4;
  double low() const;
  void set_low(double value);

  // double close = 5;
  void clear_close();
  static const int kCloseFieldNumber = 5;
  double close() const;
  void set_close(double value);

  // int64 vol = 6;
  void clear_vol();
  static const int kVolFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int64 vol() const;
  void set_vol(::PROTOBUF_NAMESPACE_ID::int64 value);

  // double amount = 7;
  void clear_amount();
  static const int kAmountFieldNumber = 7;
  double amount() const;
  void set_amount(double value);

  // int32 ts = 1;
  void clear_ts();
  static const int kTsFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 ts() const;
  void set_ts(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:secdata_transfer.Kline)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double open_;
  double high_;
  double low_;
  double close_;
  ::PROTOBUF_NAMESPACE_ID::int64 vol_;
  double amount_;
  ::PROTOBUF_NAMESPACE_ID::int32 ts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_secdata_5ftransfer_2eproto;
};
// -------------------------------------------------------------------

class AskKlineRsp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:secdata_transfer.AskKlineRsp) */ {
 public:
  AskKlineRsp();
  virtual ~AskKlineRsp();

  AskKlineRsp(const AskKlineRsp& from);
  AskKlineRsp(AskKlineRsp&& from) noexcept
    : AskKlineRsp() {
    *this = ::std::move(from);
  }

  inline AskKlineRsp& operator=(const AskKlineRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AskKlineRsp& operator=(AskKlineRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AskKlineRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AskKlineRsp* internal_default_instance() {
    return reinterpret_cast<const AskKlineRsp*>(
               &_AskKlineRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(AskKlineRsp* other);
  friend void swap(AskKlineRsp& a, AskKlineRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AskKlineRsp* New() const final {
    return CreateMaybeMessage<AskKlineRsp>(nullptr);
  }

  AskKlineRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AskKlineRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AskKlineRsp& from);
  void MergeFrom(const AskKlineRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AskKlineRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "secdata_transfer.AskKlineRsp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_secdata_5ftransfer_2eproto);
    return ::descriptor_table_secdata_5ftransfer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .secdata_transfer.Kline klines = 3;
  int klines_size() const;
  void clear_klines();
  static const int kKlinesFieldNumber = 3;
  ::secdata_transfer::Kline* mutable_klines(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::secdata_transfer::Kline >*
      mutable_klines();
  const ::secdata_transfer::Kline& klines(int index) const;
  ::secdata_transfer::Kline* add_klines();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::secdata_transfer::Kline >&
      klines() const;

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);

  // int32 status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:secdata_transfer.AskKlineRsp)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::secdata_transfer::Kline > klines_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_secdata_5ftransfer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KlineRequest

// int32 ts = 1;
inline void KlineRequest::clear_ts() {
  ts_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KlineRequest::ts() const {
  // @@protoc_insertion_point(field_get:secdata_transfer.KlineRequest.ts)
  return ts_;
}
inline void KlineRequest::set_ts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ts_ = value;
  // @@protoc_insertion_point(field_set:secdata_transfer.KlineRequest.ts)
}

// string code = 2;
inline void KlineRequest::clear_code() {
  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& KlineRequest::code() const {
  // @@protoc_insertion_point(field_get:secdata_transfer.KlineRequest.code)
  return code_.GetNoArena();
}
inline void KlineRequest::set_code(const std::string& value) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:secdata_transfer.KlineRequest.code)
}
inline void KlineRequest::set_code(std::string&& value) {
  
  code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:secdata_transfer.KlineRequest.code)
}
inline void KlineRequest::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:secdata_transfer.KlineRequest.code)
}
inline void KlineRequest::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:secdata_transfer.KlineRequest.code)
}
inline std::string* KlineRequest::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:secdata_transfer.KlineRequest.code)
  return code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KlineRequest::release_code() {
  // @@protoc_insertion_point(field_release:secdata_transfer.KlineRequest.code)
  
  return code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KlineRequest::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:secdata_transfer.KlineRequest.code)
}

// string period = 3;
inline void KlineRequest::clear_period() {
  period_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& KlineRequest::period() const {
  // @@protoc_insertion_point(field_get:secdata_transfer.KlineRequest.period)
  return period_.GetNoArena();
}
inline void KlineRequest::set_period(const std::string& value) {
  
  period_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:secdata_transfer.KlineRequest.period)
}
inline void KlineRequest::set_period(std::string&& value) {
  
  period_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:secdata_transfer.KlineRequest.period)
}
inline void KlineRequest::set_period(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  period_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:secdata_transfer.KlineRequest.period)
}
inline void KlineRequest::set_period(const char* value, size_t size) {
  
  period_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:secdata_transfer.KlineRequest.period)
}
inline std::string* KlineRequest::mutable_period() {
  
  // @@protoc_insertion_point(field_mutable:secdata_transfer.KlineRequest.period)
  return period_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KlineRequest::release_period() {
  // @@protoc_insertion_point(field_release:secdata_transfer.KlineRequest.period)
  
  return period_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KlineRequest::set_allocated_period(std::string* period) {
  if (period != nullptr) {
    
  } else {
    
  }
  period_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), period);
  // @@protoc_insertion_point(field_set_allocated:secdata_transfer.KlineRequest.period)
}

// double open = 4;
inline void KlineRequest::clear_open() {
  open_ = 0;
}
inline double KlineRequest::open() const {
  // @@protoc_insertion_point(field_get:secdata_transfer.KlineRequest.open)
  return open_;
}
inline void KlineRequest::set_open(double value) {
  
  open_ = value;
  // @@protoc_insertion_point(field_set:secdata_transfer.KlineRequest.open)
}

// double high = 5;
inline void KlineRequest::clear_high() {
  high_ = 0;
}
inline double KlineRequest::high() const {
  // @@protoc_insertion_point(field_get:secdata_transfer.KlineRequest.high)
  return high_;
}
inline void KlineRequest::set_high(double value) {
  
  high_ = value;
  // @@protoc_insertion_point(field_set:secdata_transfer.KlineRequest.high)
}

// double low = 6;
inline void KlineRequest::clear_low() {
  low_ = 0;
}
inline double KlineRequest::low() const {
  // @@protoc_insertion_point(field_get:secdata_transfer.KlineRequest.low)
  return low_;
}
inline void KlineRequest::set_low(double value) {
  
  low_ = value;
  // @@protoc_insertion_point(field_set:secdata_transfer.KlineRequest.low)
}

// double close = 7;
inline void KlineRequest::clear_close() {
  close_ = 0;
}
inline double KlineRequest::close() const {
  // @@protoc_insertion_point(field_get:secdata_transfer.KlineRequest.close)
  return close_;
}
inline void KlineRequest::set_close(double value) {
  
  close_ = value;
  // @@protoc_insertion_point(field_set:secdata_transfer.KlineRequest.close)
}

// int64 vol = 8;
inline void KlineRequest::clear_vol() {
  vol_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 KlineRequest::vol() const {
  // @@protoc_insertion_point(field_get:secdata_transfer.KlineRequest.vol)
  return vol_;
}
inline void KlineRequest::set_vol(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  vol_ = value;
  // @@protoc_insertion_point(field_set:secdata_transfer.KlineRequest.vol)
}

// double amount = 9;
inline void KlineRequest::clear_amount() {
  amount_ = 0;
}
inline double KlineRequest::amount() const {
  // @@protoc_insertion_point(field_get:secdata_transfer.KlineRequest.amount)
  return amount_;
}
inline void KlineRequest::set_amount(double value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:secdata_transfer.KlineRequest.amount)
}

// -------------------------------------------------------------------

// KlineReply

// int32 status = 1;
inline void KlineReply::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KlineReply::status() const {
  // @@protoc_insertion_point(field_get:secdata_transfer.KlineReply.status)
  return status_;
}
inline void KlineReply::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:secdata_transfer.KlineReply.status)
}

// string message = 2;
inline void KlineReply::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& KlineReply::message() const {
  // @@protoc_insertion_point(field_get:secdata_transfer.KlineReply.message)
  return message_.GetNoArena();
}
inline void KlineReply::set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:secdata_transfer.KlineReply.message)
}
inline void KlineReply::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:secdata_transfer.KlineReply.message)
}
inline void KlineReply::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:secdata_transfer.KlineReply.message)
}
inline void KlineReply::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:secdata_transfer.KlineReply.message)
}
inline std::string* KlineReply::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:secdata_transfer.KlineReply.message)
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KlineReply::release_message() {
  // @@protoc_insertion_point(field_release:secdata_transfer.KlineReply.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KlineReply::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:secdata_transfer.KlineReply.message)
}

// -------------------------------------------------------------------

// AskKlineReq

// string code = 1;
inline void AskKlineReq::clear_code() {
  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AskKlineReq::code() const {
  // @@protoc_insertion_point(field_get:secdata_transfer.AskKlineReq.code)
  return code_.GetNoArena();
}
inline void AskKlineReq::set_code(const std::string& value) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:secdata_transfer.AskKlineReq.code)
}
inline void AskKlineReq::set_code(std::string&& value) {
  
  code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:secdata_transfer.AskKlineReq.code)
}
inline void AskKlineReq::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:secdata_transfer.AskKlineReq.code)
}
inline void AskKlineReq::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:secdata_transfer.AskKlineReq.code)
}
inline std::string* AskKlineReq::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:secdata_transfer.AskKlineReq.code)
  return code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AskKlineReq::release_code() {
  // @@protoc_insertion_point(field_release:secdata_transfer.AskKlineReq.code)
  
  return code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AskKlineReq::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:secdata_transfer.AskKlineReq.code)
}

// string period = 2;
inline void AskKlineReq::clear_period() {
  period_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AskKlineReq::period() const {
  // @@protoc_insertion_point(field_get:secdata_transfer.AskKlineReq.period)
  return period_.GetNoArena();
}
inline void AskKlineReq::set_period(const std::string& value) {
  
  period_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:secdata_transfer.AskKlineReq.period)
}
inline void AskKlineReq::set_period(std::string&& value) {
  
  period_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:secdata_transfer.AskKlineReq.period)
}
inline void AskKlineReq::set_period(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  period_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:secdata_transfer.AskKlineReq.period)
}
inline void AskKlineReq::set_period(const char* value, size_t size) {
  
  period_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:secdata_transfer.AskKlineReq.period)
}
inline std::string* AskKlineReq::mutable_period() {
  
  // @@protoc_insertion_point(field_mutable:secdata_transfer.AskKlineReq.period)
  return period_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AskKlineReq::release_period() {
  // @@protoc_insertion_point(field_release:secdata_transfer.AskKlineReq.period)
  
  return period_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AskKlineReq::set_allocated_period(std::string* period) {
  if (period != nullptr) {
    
  } else {
    
  }
  period_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), period);
  // @@protoc_insertion_point(field_set_allocated:secdata_transfer.AskKlineReq.period)
}

// int32 from_ts = 3;
inline void AskKlineReq::clear_from_ts() {
  from_ts_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AskKlineReq::from_ts() const {
  // @@protoc_insertion_point(field_get:secdata_transfer.AskKlineReq.from_ts)
  return from_ts_;
}
inline void AskKlineReq::set_from_ts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  from_ts_ = value;
  // @@protoc_insertion_point(field_set:secdata_transfer.AskKlineReq.from_ts)
}

// int32 to_ts = 4;
inline void AskKlineReq::clear_to_ts() {
  to_ts_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AskKlineReq::to_ts() const {
  // @@protoc_insertion_point(field_get:secdata_transfer.AskKlineReq.to_ts)
  return to_ts_;
}
inline void AskKlineReq::set_to_ts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  to_ts_ = value;
  // @@protoc_insertion_point(field_set:secdata_transfer.AskKlineReq.to_ts)
}

// -------------------------------------------------------------------

// Kline

// int32 ts = 1;
inline void Kline::clear_ts() {
  ts_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Kline::ts() const {
  // @@protoc_insertion_point(field_get:secdata_transfer.Kline.ts)
  return ts_;
}
inline void Kline::set_ts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ts_ = value;
  // @@protoc_insertion_point(field_set:secdata_transfer.Kline.ts)
}

// double open = 2;
inline void Kline::clear_open() {
  open_ = 0;
}
inline double Kline::open() const {
  // @@protoc_insertion_point(field_get:secdata_transfer.Kline.open)
  return open_;
}
inline void Kline::set_open(double value) {
  
  open_ = value;
  // @@protoc_insertion_point(field_set:secdata_transfer.Kline.open)
}

// double high = 3;
inline void Kline::clear_high() {
  high_ = 0;
}
inline double Kline::high() const {
  // @@protoc_insertion_point(field_get:secdata_transfer.Kline.high)
  return high_;
}
inline void Kline::set_high(double value) {
  
  high_ = value;
  // @@protoc_insertion_point(field_set:secdata_transfer.Kline.high)
}

// double low = 4;
inline void Kline::clear_low() {
  low_ = 0;
}
inline double Kline::low() const {
  // @@protoc_insertion_point(field_get:secdata_transfer.Kline.low)
  return low_;
}
inline void Kline::set_low(double value) {
  
  low_ = value;
  // @@protoc_insertion_point(field_set:secdata_transfer.Kline.low)
}

// double close = 5;
inline void Kline::clear_close() {
  close_ = 0;
}
inline double Kline::close() const {
  // @@protoc_insertion_point(field_get:secdata_transfer.Kline.close)
  return close_;
}
inline void Kline::set_close(double value) {
  
  close_ = value;
  // @@protoc_insertion_point(field_set:secdata_transfer.Kline.close)
}

// int64 vol = 6;
inline void Kline::clear_vol() {
  vol_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Kline::vol() const {
  // @@protoc_insertion_point(field_get:secdata_transfer.Kline.vol)
  return vol_;
}
inline void Kline::set_vol(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  vol_ = value;
  // @@protoc_insertion_point(field_set:secdata_transfer.Kline.vol)
}

// double amount = 7;
inline void Kline::clear_amount() {
  amount_ = 0;
}
inline double Kline::amount() const {
  // @@protoc_insertion_point(field_get:secdata_transfer.Kline.amount)
  return amount_;
}
inline void Kline::set_amount(double value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:secdata_transfer.Kline.amount)
}

// -------------------------------------------------------------------

// AskKlineRsp

// int32 status = 1;
inline void AskKlineRsp::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AskKlineRsp::status() const {
  // @@protoc_insertion_point(field_get:secdata_transfer.AskKlineRsp.status)
  return status_;
}
inline void AskKlineRsp::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:secdata_transfer.AskKlineRsp.status)
}

// string message = 2;
inline void AskKlineRsp::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AskKlineRsp::message() const {
  // @@protoc_insertion_point(field_get:secdata_transfer.AskKlineRsp.message)
  return message_.GetNoArena();
}
inline void AskKlineRsp::set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:secdata_transfer.AskKlineRsp.message)
}
inline void AskKlineRsp::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:secdata_transfer.AskKlineRsp.message)
}
inline void AskKlineRsp::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:secdata_transfer.AskKlineRsp.message)
}
inline void AskKlineRsp::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:secdata_transfer.AskKlineRsp.message)
}
inline std::string* AskKlineRsp::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:secdata_transfer.AskKlineRsp.message)
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AskKlineRsp::release_message() {
  // @@protoc_insertion_point(field_release:secdata_transfer.AskKlineRsp.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AskKlineRsp::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:secdata_transfer.AskKlineRsp.message)
}

// repeated .secdata_transfer.Kline klines = 3;
inline int AskKlineRsp::klines_size() const {
  return klines_.size();
}
inline void AskKlineRsp::clear_klines() {
  klines_.Clear();
}
inline ::secdata_transfer::Kline* AskKlineRsp::mutable_klines(int index) {
  // @@protoc_insertion_point(field_mutable:secdata_transfer.AskKlineRsp.klines)
  return klines_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::secdata_transfer::Kline >*
AskKlineRsp::mutable_klines() {
  // @@protoc_insertion_point(field_mutable_list:secdata_transfer.AskKlineRsp.klines)
  return &klines_;
}
inline const ::secdata_transfer::Kline& AskKlineRsp::klines(int index) const {
  // @@protoc_insertion_point(field_get:secdata_transfer.AskKlineRsp.klines)
  return klines_.Get(index);
}
inline ::secdata_transfer::Kline* AskKlineRsp::add_klines() {
  // @@protoc_insertion_point(field_add:secdata_transfer.AskKlineRsp.klines)
  return klines_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::secdata_transfer::Kline >&
AskKlineRsp::klines() const {
  // @@protoc_insertion_point(field_list:secdata_transfer.AskKlineRsp.klines)
  return klines_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace secdata_transfer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_secdata_5ftransfer_2eproto
